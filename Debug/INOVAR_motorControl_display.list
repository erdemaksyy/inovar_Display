
INOVAR_motorControl_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005374  08005374  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800537c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000074  080053f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  080053f0  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001538d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029dc  00000000  00000000  00035431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00038ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef6e  00000000  00000000  00039e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012759  00000000  00000000  00058de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5efa  00000000  00000000  0006b53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a94  00000000  00000000  0013148c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005190 	.word	0x08005190

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08005190 	.word	0x08005190

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f804 	bl	80005d0 <ee_read>
 80005c8:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e6:	d901      	bls.n	80005ec <ee_read+0x1c>
    return false;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e02b      	b.n	8000644 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e021      	b.n	8000636 <ee_read+0x66>
  {
    if (data != NULL)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + (((uint32_t)0x08000800) | (_EE_SIZE * _EE_USE_FLASH_PAGE_OR_SECTOR))));
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80005fe:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	701a      	strb	r2, [r3, #0]
      data++;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000616:	d20b      	bcs.n	8000630 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + (((uint32_t)0x08000800) | (_EE_SIZE * _EE_USE_FLASH_PAGE_OR_SECTOR))));
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800061e:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2d9      	uxtb	r1, r3
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <ee_read+0x80>)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4413      	add	r3, r2
 800062c:	460a      	mov	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	429a      	cmp	r2, r3
 8000640:	d3d7      	bcc.n	80005f2 <ee_read+0x22>
#endif
  }
  return true;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	371c      	adds	r7, #28
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	200000ac 	.word	0x200000ac

08000654 <NEXTION_SendString>:
//uint16_t i,n,m,z;

uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF};

void NEXTION_SendString (char *ID, char *string)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s\%s", ID, string);
 800065e:	f107 0008 	add.w	r0, r7, #8
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	490b      	ldr	r1, [pc, #44]	; (8000694 <NEXTION_SendString+0x40>)
 8000668:	f004 f99e 	bl	80049a8 <siprintf>
 800066c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 1000);
 800066e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000670:	b29a      	uxth	r2, r3
 8000672:	f107 0108 	add.w	r1, r7, #8
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <NEXTION_SendString+0x44>)
 800067c:	f002 fc32 	bl	8002ee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	2203      	movs	r2, #3
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <NEXTION_SendString+0x48>)
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <NEXTION_SendString+0x44>)
 8000688:	f002 fc2c 	bl	8002ee4 <HAL_UART_Transmit>
}
 800068c:	bf00      	nop
 800068e:	3740      	adds	r7, #64	; 0x40
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	080051a8 	.word	0x080051a8
 8000698:	200005ac 	.word	0x200005ac
 800069c:	20000000 	.word	0x20000000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fd09 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f818 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f8c6 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f878 	bl	80007a4 <MX_USART2_UART_Init>
  ee_init();
 80006b4:	f7ff ff80 	bl	80005b8 <ee_init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <main+0x34>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <main+0x34>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0220 	orr.w	r2, r2, #32
 80006c6:	601a      	str	r2, [r3, #0]
//  ee_write(0,4,datawrite);
//  ee_read(0,4,dataread);



  ee_read(0,4,dataread);
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <main+0x38>)
 80006ca:	2104      	movs	r1, #4
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ff7f 	bl	80005d0 <ee_read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x32>
 80006d4:	200005ac 	.word	0x200005ac
 80006d8:	20000094 	.word	0x20000094

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0a4      	sub	sp, #144	; 0x90
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e6:	2238      	movs	r2, #56	; 0x38
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f89a 	bl	8004824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2244      	movs	r2, #68	; 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f88c 	bl	8004824 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800070c:	2000      	movs	r0, #0
 800070e:	f001 f845 	bl	800179c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800072c:	2355      	movs	r3, #85	; 0x55
 800072e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f8db 	bl	8001904 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000754:	f000 f8ce 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2303      	movs	r3, #3
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fbde 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077e:	f000 f8b9 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000782:	2302      	movs	r3, #2
 8000784:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe1f 	bl	80023d0 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 f8ac 	bl	80008f4 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3790      	adds	r7, #144	; 0x90
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x90>)
 80007ee:	f002 fb29 	bl	8002e44 <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f87c 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_USART2_UART_Init+0x90>)
 8000800:	f003 ff09 	bl	8004616 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 f873 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x90>)
 8000812:	f003 ff3e 	bl	8004692 <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 f86a 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_USART2_UART_Init+0x90>)
 8000822:	f003 febf 	bl	80045a4 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f862 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200005ac 	.word	0x200005ac
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_GPIO_Init+0x90>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <MX_GPIO_Init+0x90>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_GPIO_Init+0x90>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0x90>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_GPIO_Init+0x90>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0x90>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0x90>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <MX_GPIO_Init+0x90>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_GPIO_Init+0x90>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 ff63 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008a6:	2320      	movs	r3, #32
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f000 fdd2 	bl	8001468 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 fc03 	bl	80010ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f000 ffd5 	bl	80018e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <HAL_UART_MspInit+0x8c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12f      	bne.n	80009ca <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_UART_MspInit+0x90>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <HAL_UART_MspInit+0x90>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	6593      	str	r3, [r2, #88]	; 0x58
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x90>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x90>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <HAL_UART_MspInit+0x90>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_UART_MspInit+0x90>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800099a:	2318      	movs	r3, #24
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <HAL_UART_MspInit+0x94>)
 80009b6:	f000 fd57 	bl	8001468 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2026      	movs	r0, #38	; 0x26
 80009c0:	f000 fc6a 	bl	8001298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c4:	2026      	movs	r0, #38	; 0x26
 80009c6:	f000 fc81 	bl	80012cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_InitTick+0xcc>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <HAL_InitTick+0xcc>)
 80009fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a00:	6613      	str	r3, [r2, #96]	; 0x60
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_InitTick+0xcc>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fc61 	bl	80022e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a1e:	f001 fc49 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8000a22:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <HAL_InitTick+0xd0>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	0c9b      	lsrs	r3, r3, #18
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a34:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <HAL_InitTick+0xd8>)
 8000a36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a40:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a54:	f001 feac 	bl	80027b0 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d11b      	bne.n	8000a9e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a66:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <HAL_InitTick+0xd4>)
 8000a68:	f001 ff04 	bl	8002874 <HAL_TIM_Base_Start_IT>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d111      	bne.n	8000a9e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f000 fc26 	bl	80012cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d808      	bhi.n	8000a98 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	2019      	movs	r0, #25
 8000a8c:	f000 fc04 	bl	8001298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0xdc>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e002      	b.n	8000a9e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3730      	adds	r7, #48	; 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	200006b4 	.word	0x200006b4
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	20000008 	.word	0x20000008

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b1e:	f001 ff13 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200006b4 	.word	0x200006b4

08000b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0




  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b30:	4891      	ldr	r0, [pc, #580]	; (8000d78 <USART2_IRQHandler+0x24c>)
 8000b32:	f002 fab3 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &rxBuff,1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4990      	ldr	r1, [pc, #576]	; (8000d7c <USART2_IRQHandler+0x250>)
 8000b3a:	488f      	ldr	r0, [pc, #572]	; (8000d78 <USART2_IRQHandler+0x24c>)
 8000b3c:	f002 fa68 	bl	8003010 <HAL_UART_Receive_IT>

//  if(buffCounter == 0 && rxBuff != 0)
//	  return;
  buffDisplay[buffCounter++]=rxBuff;
 8000b40:	4b8e      	ldr	r3, [pc, #568]	; (8000d7c <USART2_IRQHandler+0x250>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <USART2_IRQHandler+0x254>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	b290      	uxth	r0, r2
 8000b4c:	4a8c      	ldr	r2, [pc, #560]	; (8000d80 <USART2_IRQHandler+0x254>)
 8000b4e:	8010      	strh	r0, [r2, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	b2c9      	uxtb	r1, r1
 8000b54:	4b8b      	ldr	r3, [pc, #556]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b56:	5499      	strb	r1, [r3, r2]

	 if(rxBuff == 0XBA ){
 8000b58:	4b88      	ldr	r3, [pc, #544]	; (8000d7c <USART2_IRQHandler+0x250>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2bba      	cmp	r3, #186	; 0xba
 8000b5e:	f040 8210 	bne.w	8000f82 <USART2_IRQHandler+0x456>


		 if(buffDisplay[5] == 'O' && buffDisplay[6] == 'P' && buffDisplay[7] == 'E' && buffDisplay[8] == 'N')
 8000b62:	4b88      	ldr	r3, [pc, #544]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b64:	795b      	ldrb	r3, [r3, #5]
 8000b66:	2b4f      	cmp	r3, #79	; 0x4f
 8000b68:	d113      	bne.n	8000b92 <USART2_IRQHandler+0x66>
 8000b6a:	4b86      	ldr	r3, [pc, #536]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	2b50      	cmp	r3, #80	; 0x50
 8000b70:	d10f      	bne.n	8000b92 <USART2_IRQHandler+0x66>
 8000b72:	4b84      	ldr	r3, [pc, #528]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b74:	79db      	ldrb	r3, [r3, #7]
 8000b76:	2b45      	cmp	r3, #69	; 0x45
 8000b78:	d10b      	bne.n	8000b92 <USART2_IRQHandler+0x66>
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b7c:	7a1b      	ldrb	r3, [r3, #8]
 8000b7e:	2b4e      	cmp	r3, #78	; 0x4e
 8000b80:	d107      	bne.n	8000b92 <USART2_IRQHandler+0x66>
		 {
			 vitrinac = true;
 8000b82:	4b81      	ldr	r3, [pc, #516]	; (8000d88 <USART2_IRQHandler+0x25c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]

			 NEXTION_SendString("page ","4");
 8000b88:	4980      	ldr	r1, [pc, #512]	; (8000d8c <USART2_IRQHandler+0x260>)
 8000b8a:	4881      	ldr	r0, [pc, #516]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000b8c:	f7ff fd62 	bl	8000654 <NEXTION_SendString>
		 {
 8000b90:	e1ef      	b.n	8000f72 <USART2_IRQHandler+0x446>
		 }
		 else if(buffDisplay[5] == 'P' && buffDisplay[6] == 'S' && buffDisplay[7] == 'W' && vitrinac)
 8000b92:	4b7c      	ldr	r3, [pc, #496]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	2b50      	cmp	r3, #80	; 0x50
 8000b98:	d165      	bne.n	8000c66 <USART2_IRQHandler+0x13a>
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000b9c:	799b      	ldrb	r3, [r3, #6]
 8000b9e:	2b53      	cmp	r3, #83	; 0x53
 8000ba0:	d161      	bne.n	8000c66 <USART2_IRQHandler+0x13a>
 8000ba2:	4b78      	ldr	r3, [pc, #480]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000ba4:	79db      	ldrb	r3, [r3, #7]
 8000ba6:	2b57      	cmp	r3, #87	; 0x57
 8000ba8:	d15d      	bne.n	8000c66 <USART2_IRQHandler+0x13a>
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <USART2_IRQHandler+0x25c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d059      	beq.n	8000c66 <USART2_IRQHandler+0x13a>
		 {
			q = buffDisplay[8]-48;
 8000bb2:	4b74      	ldr	r3, [pc, #464]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000bb4:	7a1b      	ldrb	r3, [r3, #8]
 8000bb6:	3b30      	subs	r3, #48	; 0x30
 8000bb8:	4a76      	ldr	r2, [pc, #472]	; (8000d94 <USART2_IRQHandler+0x268>)
 8000bba:	6013      	str	r3, [r2, #0]
			w = buffDisplay[9]-48;
 8000bbc:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000bbe:	7a5b      	ldrb	r3, [r3, #9]
 8000bc0:	3b30      	subs	r3, #48	; 0x30
 8000bc2:	4a75      	ldr	r2, [pc, #468]	; (8000d98 <USART2_IRQHandler+0x26c>)
 8000bc4:	6013      	str	r3, [r2, #0]
			e = buffDisplay[10]-48;
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000bc8:	7a9b      	ldrb	r3, [r3, #10]
 8000bca:	3b30      	subs	r3, #48	; 0x30
 8000bcc:	4a73      	ldr	r2, [pc, #460]	; (8000d9c <USART2_IRQHandler+0x270>)
 8000bce:	6013      	str	r3, [r2, #0]
			r = buffDisplay[11]-48;
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000bd2:	7adb      	ldrb	r3, [r3, #11]
 8000bd4:	3b30      	subs	r3, #48	; 0x30
 8000bd6:	4a72      	ldr	r2, [pc, #456]	; (8000da0 <USART2_IRQHandler+0x274>)
 8000bd8:	6013      	str	r3, [r2, #0]

			 Sifrem1[0] = q,
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <USART2_IRQHandler+0x268>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <USART2_IRQHandler+0x278>)
 8000be2:	701a      	strb	r2, [r3, #0]
			 Sifrem1[1] = w,
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <USART2_IRQHandler+0x26c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <USART2_IRQHandler+0x278>)
 8000bec:	705a      	strb	r2, [r3, #1]
			 Sifrem1[2] = e,
 8000bee:	4b6b      	ldr	r3, [pc, #428]	; (8000d9c <USART2_IRQHandler+0x270>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <USART2_IRQHandler+0x278>)
 8000bf6:	709a      	strb	r2, [r3, #2]
			 Sifrem1[3] = r;
 8000bf8:	4b69      	ldr	r3, [pc, #420]	; (8000da0 <USART2_IRQHandler+0x274>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <USART2_IRQHandler+0x278>)
 8000c00:	70da      	strb	r2, [r3, #3]
			for (m=0; m<sizeof(Sifrem1); m++) {
 8000c02:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e010      	b.n	8000c2c <USART2_IRQHandler+0x100>
			sprintf(&buff[m],"%d",Sifrem1[m]);
 8000c0a:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a67      	ldr	r2, [pc, #412]	; (8000dac <USART2_IRQHandler+0x280>)
 8000c10:	1898      	adds	r0, r3, r2
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a63      	ldr	r2, [pc, #396]	; (8000da4 <USART2_IRQHandler+0x278>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4964      	ldr	r1, [pc, #400]	; (8000db0 <USART2_IRQHandler+0x284>)
 8000c1e:	f003 fec3 	bl	80049a8 <siprintf>
			for (m=0; m<sizeof(Sifrem1); m++) {
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9ea      	bls.n	8000c0a <USART2_IRQHandler+0xde>
			}
			m = atoi(buff);
 8000c34:	485d      	ldr	r0, [pc, #372]	; (8000dac <USART2_IRQHandler+0x280>)
 8000c36:	f003 fdb9 	bl	80047ac <atoi>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a5a      	ldr	r2, [pc, #360]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c3e:	6013      	str	r3, [r2, #0]

	 		vitrinac = false;
 8000c40:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <USART2_IRQHandler+0x25c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]

	 		if(m == i)
 8000c46:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <USART2_IRQHandler+0x27c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <USART2_IRQHandler+0x288>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <USART2_IRQHandler+0x130>
	 		{
	 			NEXTION_SendString("page ","2");
 8000c52:	4959      	ldr	r1, [pc, #356]	; (8000db8 <USART2_IRQHandler+0x28c>)
 8000c54:	484e      	ldr	r0, [pc, #312]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000c56:	f7ff fcfd 	bl	8000654 <NEXTION_SendString>
	 		if(m == i)
 8000c5a:	e18a      	b.n	8000f72 <USART2_IRQHandler+0x446>
	 		}
	 		else
	 		{

	 			NEXTION_SendString("page ","1");
 8000c5c:	4957      	ldr	r1, [pc, #348]	; (8000dbc <USART2_IRQHandler+0x290>)
 8000c5e:	484c      	ldr	r0, [pc, #304]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000c60:	f7ff fcf8 	bl	8000654 <NEXTION_SendString>
	 		if(m == i)
 8000c64:	e185      	b.n	8000f72 <USART2_IRQHandler+0x446>


	 		}

		 }
		 else if(buffDisplay[5] == 'S' && buffDisplay[6] == 'T' && buffDisplay[7] == 'N' && buffDisplay[8] == 'G')
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	2b53      	cmp	r3, #83	; 0x53
 8000c6c:	d110      	bne.n	8000c90 <USART2_IRQHandler+0x164>
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c70:	799b      	ldrb	r3, [r3, #6]
 8000c72:	2b54      	cmp	r3, #84	; 0x54
 8000c74:	d10c      	bne.n	8000c90 <USART2_IRQHandler+0x164>
 8000c76:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c78:	79db      	ldrb	r3, [r3, #7]
 8000c7a:	2b4e      	cmp	r3, #78	; 0x4e
 8000c7c:	d108      	bne.n	8000c90 <USART2_IRQHandler+0x164>
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c80:	7a1b      	ldrb	r3, [r3, #8]
 8000c82:	2b47      	cmp	r3, #71	; 0x47
 8000c84:	d104      	bne.n	8000c90 <USART2_IRQHandler+0x164>
		 {

			 NEXTION_SendString("page ","5");
 8000c86:	494e      	ldr	r1, [pc, #312]	; (8000dc0 <USART2_IRQHandler+0x294>)
 8000c88:	4841      	ldr	r0, [pc, #260]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000c8a:	f7ff fce3 	bl	8000654 <NEXTION_SendString>
		 {
 8000c8e:	e170      	b.n	8000f72 <USART2_IRQHandler+0x446>


		 }
		 else if(buffDisplay[5] == 'C' && buffDisplay[6] == 'L' && buffDisplay[7] == 'S' && buffDisplay[8] == 'E')
 8000c90:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	2b43      	cmp	r3, #67	; 0x43
 8000c96:	d110      	bne.n	8000cba <USART2_IRQHandler+0x18e>
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000c9a:	799b      	ldrb	r3, [r3, #6]
 8000c9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000c9e:	d10c      	bne.n	8000cba <USART2_IRQHandler+0x18e>
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000ca2:	79db      	ldrb	r3, [r3, #7]
 8000ca4:	2b53      	cmp	r3, #83	; 0x53
 8000ca6:	d108      	bne.n	8000cba <USART2_IRQHandler+0x18e>
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000caa:	7a1b      	ldrb	r3, [r3, #8]
 8000cac:	2b45      	cmp	r3, #69	; 0x45
 8000cae:	d104      	bne.n	8000cba <USART2_IRQHandler+0x18e>
		 {
			 //sifreOlustur = true;
			 NEXTION_SendString("page ","2");
 8000cb0:	4941      	ldr	r1, [pc, #260]	; (8000db8 <USART2_IRQHandler+0x28c>)
 8000cb2:	4837      	ldr	r0, [pc, #220]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000cb4:	f7ff fcce 	bl	8000654 <NEXTION_SendString>
		 {
 8000cb8:	e15b      	b.n	8000f72 <USART2_IRQHandler+0x446>
		 }
		 else if(buffDisplay[5] == 'P' && buffDisplay[6] == 'S' && buffDisplay[7] == 'W' && buffDisplay[8] == 'C')
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b50      	cmp	r3, #80	; 0x50
 8000cc0:	d11a      	bne.n	8000cf8 <USART2_IRQHandler+0x1cc>
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000cc4:	799b      	ldrb	r3, [r3, #6]
 8000cc6:	2b53      	cmp	r3, #83	; 0x53
 8000cc8:	d116      	bne.n	8000cf8 <USART2_IRQHandler+0x1cc>
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000ccc:	79db      	ldrb	r3, [r3, #7]
 8000cce:	2b57      	cmp	r3, #87	; 0x57
 8000cd0:	d112      	bne.n	8000cf8 <USART2_IRQHandler+0x1cc>
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000cd4:	7a1b      	ldrb	r3, [r3, #8]
 8000cd6:	2b43      	cmp	r3, #67	; 0x43
 8000cd8:	d10e      	bne.n	8000cf8 <USART2_IRQHandler+0x1cc>
		 {

			 vitrinsifre=true;
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <USART2_IRQHandler+0x298>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
			 if(sifredegis==true)
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <USART2_IRQHandler+0x29c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <USART2_IRQHandler+0x1c2>
			 {
				 vitrinsifre=false;
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <USART2_IRQHandler+0x298>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
			 }

			 NEXTION_SendString("page ","4");
 8000cee:	4927      	ldr	r1, [pc, #156]	; (8000d8c <USART2_IRQHandler+0x260>)
 8000cf0:	4827      	ldr	r0, [pc, #156]	; (8000d90 <USART2_IRQHandler+0x264>)
 8000cf2:	f7ff fcaf 	bl	8000654 <NEXTION_SendString>
		 {
 8000cf6:	e13c      	b.n	8000f72 <USART2_IRQHandler+0x446>

		 }
		 else if(buffDisplay[5] == 'P' && buffDisplay[6] == 'S' && buffDisplay[7] == 'W' && vitrinsifre==true)
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	2b50      	cmp	r3, #80	; 0x50
 8000cfe:	f040 8099 	bne.w	8000e34 <USART2_IRQHandler+0x308>
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d04:	799b      	ldrb	r3, [r3, #6]
 8000d06:	2b53      	cmp	r3, #83	; 0x53
 8000d08:	f040 8094 	bne.w	8000e34 <USART2_IRQHandler+0x308>
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d0e:	79db      	ldrb	r3, [r3, #7]
 8000d10:	2b57      	cmp	r3, #87	; 0x57
 8000d12:	f040 808f 	bne.w	8000e34 <USART2_IRQHandler+0x308>
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <USART2_IRQHandler+0x298>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 808a 	beq.w	8000e34 <USART2_IRQHandler+0x308>
		 		 {
			 //sifredegis == true;

 			 q = buffDisplay[8]-48;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	3b30      	subs	r3, #48	; 0x30
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <USART2_IRQHandler+0x268>)
 8000d28:	6013      	str	r3, [r2, #0]
 			 w = buffDisplay[9]-48;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d2c:	7a5b      	ldrb	r3, [r3, #9]
 8000d2e:	3b30      	subs	r3, #48	; 0x30
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <USART2_IRQHandler+0x26c>)
 8000d32:	6013      	str	r3, [r2, #0]
 			 e = buffDisplay[10]-48;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d36:	7a9b      	ldrb	r3, [r3, #10]
 8000d38:	3b30      	subs	r3, #48	; 0x30
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <USART2_IRQHandler+0x270>)
 8000d3c:	6013      	str	r3, [r2, #0]
 			 r = buffDisplay[11]-48;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <USART2_IRQHandler+0x258>)
 8000d40:	7adb      	ldrb	r3, [r3, #11]
 8000d42:	3b30      	subs	r3, #48	; 0x30
 8000d44:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <USART2_IRQHandler+0x274>)
 8000d46:	6013      	str	r3, [r2, #0]

 			 Sifrem[0] = q,
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <USART2_IRQHandler+0x268>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <USART2_IRQHandler+0x2a0>)
 8000d50:	701a      	strb	r2, [r3, #0]
 			 Sifrem[1] = w,
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <USART2_IRQHandler+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <USART2_IRQHandler+0x2a0>)
 8000d5a:	705a      	strb	r2, [r3, #1]
 			 Sifrem[2] = e,
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <USART2_IRQHandler+0x270>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <USART2_IRQHandler+0x2a0>)
 8000d64:	709a      	strb	r2, [r3, #2]
 			 Sifrem[3] = r;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <USART2_IRQHandler+0x274>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <USART2_IRQHandler+0x2a0>)
 8000d6e:	70da      	strb	r2, [r3, #3]

 		    for (i=0; i<sizeof(Sifrem); i++) {
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <USART2_IRQHandler+0x288>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e03c      	b.n	8000df2 <USART2_IRQHandler+0x2c6>
 8000d78:	200005ac 	.word	0x200005ac
 8000d7c:	200005a4 	.word	0x200005a4
 8000d80:	20000090 	.word	0x20000090
 8000d84:	20000640 	.word	0x20000640
 8000d88:	2000009c 	.word	0x2000009c
 8000d8c:	080051d0 	.word	0x080051d0
 8000d90:	080051d4 	.word	0x080051d4
 8000d94:	200006a8 	.word	0x200006a8
 8000d98:	2000051c 	.word	0x2000051c
 8000d9c:	2000063c 	.word	0x2000063c
 8000da0:	20000588 	.word	0x20000588
 8000da4:	20000584 	.word	0x20000584
 8000da8:	200006a4 	.word	0x200006a4
 8000dac:	200004b4 	.word	0x200004b4
 8000db0:	080051dc 	.word	0x080051dc
 8000db4:	20000594 	.word	0x20000594
 8000db8:	080051e0 	.word	0x080051e0
 8000dbc:	080051e4 	.word	0x080051e4
 8000dc0:	080051e8 	.word	0x080051e8
 8000dc4:	2000009d 	.word	0x2000009d
 8000dc8:	2000009e 	.word	0x2000009e
 8000dcc:	2000058c 	.word	0x2000058c
 		        sprintf(&buff[i],"%d",Sifrem[i]);
 8000dd0:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6d      	ldr	r2, [pc, #436]	; (8000f8c <USART2_IRQHandler+0x460>)
 8000dd6:	1898      	adds	r0, r3, r2
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	461a      	mov	r2, r3
 8000de2:	496c      	ldr	r1, [pc, #432]	; (8000f94 <USART2_IRQHandler+0x468>)
 8000de4:	f003 fde0 	bl	80049a8 <siprintf>
 		    for (i=0; i<sizeof(Sifrem); i++) {
 8000de8:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a66      	ldr	r2, [pc, #408]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b65      	ldr	r3, [pc, #404]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d9ea      	bls.n	8000dd0 <USART2_IRQHandler+0x2a4>
 		    }
 		    i = atoi(buff);
 8000dfa:	4864      	ldr	r0, [pc, #400]	; (8000f8c <USART2_IRQHandler+0x460>)
 8000dfc:	f003 fcd6 	bl	80047ac <atoi>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a61      	ldr	r2, [pc, #388]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000e04:	6013      	str	r3, [r2, #0]

			//ee_write(0, 4, i);
			ee_read(0,4,dataread);
 8000e06:	4a64      	ldr	r2, [pc, #400]	; (8000f98 <USART2_IRQHandler+0x46c>)
 8000e08:	2104      	movs	r1, #4
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fbe0 	bl	80005d0 <ee_read>
			if(i!=1100)
 8000e10:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f240 424c 	movw	r2, #1100	; 0x44c
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	f000 80aa 	beq.w	8000f72 <USART2_IRQHandler+0x446>
			{
				vitrinsifre=false;
 8000e1e:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <USART2_IRQHandler+0x470>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
				sifredegis=true;
 8000e24:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <USART2_IRQHandler+0x474>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
				//ee_write(0, 4, i);
			//NEXTION_SendString("page ","1");
				NEXTION_SendString("page ","6");
 8000e2a:	495e      	ldr	r1, [pc, #376]	; (8000fa4 <USART2_IRQHandler+0x478>)
 8000e2c:	485e      	ldr	r0, [pc, #376]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000e2e:	f7ff fc11 	bl	8000654 <NEXTION_SendString>
			if(i!=1100)
 8000e32:	e09e      	b.n	8000f72 <USART2_IRQHandler+0x446>
			}

		 		 }
		 else if(buffDisplay[5] == 'P' && buffDisplay[6] == 'S' && buffDisplay[7] == 'W' && sifredegis==true)
 8000e34:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	2b50      	cmp	r3, #80	; 0x50
 8000e3a:	d171      	bne.n	8000f20 <USART2_IRQHandler+0x3f4>
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e3e:	799b      	ldrb	r3, [r3, #6]
 8000e40:	2b53      	cmp	r3, #83	; 0x53
 8000e42:	d16d      	bne.n	8000f20 <USART2_IRQHandler+0x3f4>
 8000e44:	4b59      	ldr	r3, [pc, #356]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e46:	79db      	ldrb	r3, [r3, #7]
 8000e48:	2b57      	cmp	r3, #87	; 0x57
 8000e4a:	d169      	bne.n	8000f20 <USART2_IRQHandler+0x3f4>
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <USART2_IRQHandler+0x474>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d065      	beq.n	8000f20 <USART2_IRQHandler+0x3f4>
				 		 {


		 			 q = buffDisplay[8]-48;
 8000e54:	4b55      	ldr	r3, [pc, #340]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e56:	7a1b      	ldrb	r3, [r3, #8]
 8000e58:	3b30      	subs	r3, #48	; 0x30
 8000e5a:	4a55      	ldr	r2, [pc, #340]	; (8000fb0 <USART2_IRQHandler+0x484>)
 8000e5c:	6013      	str	r3, [r2, #0]
		 			 w = buffDisplay[9]-48;
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e60:	7a5b      	ldrb	r3, [r3, #9]
 8000e62:	3b30      	subs	r3, #48	; 0x30
 8000e64:	4a53      	ldr	r2, [pc, #332]	; (8000fb4 <USART2_IRQHandler+0x488>)
 8000e66:	6013      	str	r3, [r2, #0]
		 			 e = buffDisplay[10]-48;
 8000e68:	4b50      	ldr	r3, [pc, #320]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e6a:	7a9b      	ldrb	r3, [r3, #10]
 8000e6c:	3b30      	subs	r3, #48	; 0x30
 8000e6e:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <USART2_IRQHandler+0x48c>)
 8000e70:	6013      	str	r3, [r2, #0]
		 			 r = buffDisplay[11]-48;
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <USART2_IRQHandler+0x480>)
 8000e74:	7adb      	ldrb	r3, [r3, #11]
 8000e76:	3b30      	subs	r3, #48	; 0x30
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <USART2_IRQHandler+0x490>)
 8000e7a:	6013      	str	r3, [r2, #0]

		 			 Sifrem[0] = q,
 8000e7c:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <USART2_IRQHandler+0x484>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000e84:	701a      	strb	r2, [r3, #0]
		 			 Sifrem[1] = w,
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <USART2_IRQHandler+0x488>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000e8e:	705a      	strb	r2, [r3, #1]
		 			 Sifrem[2] = e,
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <USART2_IRQHandler+0x48c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000e98:	709a      	strb	r2, [r3, #2]
		 			 Sifrem[3] = r;
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <USART2_IRQHandler+0x490>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000ea2:	70da      	strb	r2, [r3, #3]

		 		    for (u=0; u<sizeof(Sifrem); u++) {
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e010      	b.n	8000ece <USART2_IRQHandler+0x3a2>
		 		        sprintf(&buff[u],"%d",Sifrem[u]);
 8000eac:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a36      	ldr	r2, [pc, #216]	; (8000f8c <USART2_IRQHandler+0x460>)
 8000eb2:	1898      	adds	r0, r3, r2
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <USART2_IRQHandler+0x464>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4935      	ldr	r1, [pc, #212]	; (8000f94 <USART2_IRQHandler+0x468>)
 8000ec0:	f003 fd72 	bl	80049a8 <siprintf>
		 		    for (u=0; u<sizeof(Sifrem); u++) {
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a3d      	ldr	r2, [pc, #244]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9ea      	bls.n	8000eac <USART2_IRQHandler+0x380>
		 		    }
		 		    u = atoi(buff);
 8000ed6:	482d      	ldr	r0, [pc, #180]	; (8000f8c <USART2_IRQHandler+0x460>)
 8000ed8:	f003 fc68 	bl	80047ac <atoi>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000ee0:	6013      	str	r3, [r2, #0]

					//ee_write(0, 4, i);
					ee_read(0,4,dataread);
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <USART2_IRQHandler+0x46c>)
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fb72 	bl	80005d0 <ee_read>



					if(u==i)
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <USART2_IRQHandler+0x494>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <USART2_IRQHandler+0x45c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d10e      	bne.n	8000f16 <USART2_IRQHandler+0x3ea>
					{
						NEXTION_SendString("page ","7");
 8000ef8:	4932      	ldr	r1, [pc, #200]	; (8000fc4 <USART2_IRQHandler+0x498>)
 8000efa:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000efc:	f7ff fbaa 	bl	8000654 <NEXTION_SendString>
						 sifredegis = false;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <USART2_IRQHandler+0x474>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
						 vitrinsifre = true;
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <USART2_IRQHandler+0x470>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
						//ee_write(0, 4, i);
				     NEXTION_SendString("page ","4");
 8000f0c:	492e      	ldr	r1, [pc, #184]	; (8000fc8 <USART2_IRQHandler+0x49c>)
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000f10:	f7ff fba0 	bl	8000654 <NEXTION_SendString>
					if(u==i)
 8000f14:	e02d      	b.n	8000f72 <USART2_IRQHandler+0x446>


					}
					else
					{
						NEXTION_SendString("page ","1");
 8000f16:	492d      	ldr	r1, [pc, #180]	; (8000fcc <USART2_IRQHandler+0x4a0>)
 8000f18:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000f1a:	f7ff fb9b 	bl	8000654 <NEXTION_SendString>
					if(u==i)
 8000f1e:	e028      	b.n	8000f72 <USART2_IRQHandler+0x446>
					}

				 		 }

		 else if(buffDisplay[5] == 'S' && buffDisplay[6] == 'T' && buffDisplay[7] == 'R' && buffDisplay[8] == 'T')
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f22:	795b      	ldrb	r3, [r3, #5]
 8000f24:	2b53      	cmp	r3, #83	; 0x53
 8000f26:	d110      	bne.n	8000f4a <USART2_IRQHandler+0x41e>
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f2a:	799b      	ldrb	r3, [r3, #6]
 8000f2c:	2b54      	cmp	r3, #84	; 0x54
 8000f2e:	d10c      	bne.n	8000f4a <USART2_IRQHandler+0x41e>
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f32:	79db      	ldrb	r3, [r3, #7]
 8000f34:	2b52      	cmp	r3, #82	; 0x52
 8000f36:	d108      	bne.n	8000f4a <USART2_IRQHandler+0x41e>
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f3a:	7a1b      	ldrb	r3, [r3, #8]
 8000f3c:	2b54      	cmp	r3, #84	; 0x54
 8000f3e:	d104      	bne.n	8000f4a <USART2_IRQHandler+0x41e>
				 {

					 NEXTION_SendString("page ","3");
 8000f40:	4923      	ldr	r1, [pc, #140]	; (8000fd0 <USART2_IRQHandler+0x4a4>)
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000f44:	f7ff fb86 	bl	8000654 <NEXTION_SendString>
				 {
 8000f48:	e013      	b.n	8000f72 <USART2_IRQHandler+0x446>

				 }
		 else if(buffDisplay[5] == 'S' && buffDisplay[6] == 'T' && buffDisplay[7] == 'O' && buffDisplay[8] == 'P')
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	2b53      	cmp	r3, #83	; 0x53
 8000f50:	d10f      	bne.n	8000f72 <USART2_IRQHandler+0x446>
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f54:	799b      	ldrb	r3, [r3, #6]
 8000f56:	2b54      	cmp	r3, #84	; 0x54
 8000f58:	d10b      	bne.n	8000f72 <USART2_IRQHandler+0x446>
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f5c:	79db      	ldrb	r3, [r3, #7]
 8000f5e:	2b4f      	cmp	r3, #79	; 0x4f
 8000f60:	d107      	bne.n	8000f72 <USART2_IRQHandler+0x446>
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f64:	7a1b      	ldrb	r3, [r3, #8]
 8000f66:	2b50      	cmp	r3, #80	; 0x50
 8000f68:	d103      	bne.n	8000f72 <USART2_IRQHandler+0x446>
				 {

					 NEXTION_SendString("page ","1");
 8000f6a:	4918      	ldr	r1, [pc, #96]	; (8000fcc <USART2_IRQHandler+0x4a0>)
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <USART2_IRQHandler+0x47c>)
 8000f6e:	f7ff fb71 	bl	8000654 <NEXTION_SendString>

				 }


		 buffCounter=0;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <USART2_IRQHandler+0x4a8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
		 memset(buffDisplay,'0',sizeof(buffDisplay));
 8000f78:	2263      	movs	r2, #99	; 0x63
 8000f7a:	2130      	movs	r1, #48	; 0x30
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <USART2_IRQHandler+0x480>)
 8000f7e:	f003 fc51 	bl	8004824 <memset>

	 }
//  v = atoll(rxBuf);

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000594 	.word	0x20000594
 8000f8c:	200004b4 	.word	0x200004b4
 8000f90:	2000058c 	.word	0x2000058c
 8000f94:	080051dc 	.word	0x080051dc
 8000f98:	20000098 	.word	0x20000098
 8000f9c:	2000009d 	.word	0x2000009d
 8000fa0:	2000009e 	.word	0x2000009e
 8000fa4:	080051ec 	.word	0x080051ec
 8000fa8:	080051d4 	.word	0x080051d4
 8000fac:	20000640 	.word	0x20000640
 8000fb0:	200006a8 	.word	0x200006a8
 8000fb4:	2000051c 	.word	0x2000051c
 8000fb8:	2000063c 	.word	0x2000063c
 8000fbc:	20000588 	.word	0x20000588
 8000fc0:	200006ac 	.word	0x200006ac
 8000fc4:	080051f0 	.word	0x080051f0
 8000fc8:	080051d0 	.word	0x080051d0
 8000fcc:	080051e4 	.word	0x080051e4
 8000fd0:	080051f4 	.word	0x080051f4
 8000fd4:	20000090 	.word	0x20000090

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f003 fbd4 	bl	80047b4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20008000 	.word	0x20008000
 8001038:	00000400 	.word	0x00000400
 800103c:	200000a0 	.word	0x200000a0
 8001040:	20000718 	.word	0x20000718

08001044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopForever+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fb93 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fb01 	bl	80006a0 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010ac:	0800537c 	.word	0x0800537c
  ldr r2, =_sbss
 80010b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010b4:	20000714 	.word	0x20000714

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8dc 	bl	8001282 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fc88 	bl	80009e0 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fc10 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]

}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x1c>)
 80010fc:	6013      	str	r3, [r2, #0]
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20000700 	.word	0x20000700
 800110c:	2000000c 	.word	0x2000000c

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000700 	.word	0x20000700

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff4c 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a6:	f7ff ff63 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f7ff ffb3 	bl	800121c <NVIC_EncodePriority>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff82 	bl	80011c8 <__NVIC_SetPriority>
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff56 	bl	800118c <__NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d005      	beq.n	800130c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2204      	movs	r2, #4
 8001304:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e037      	b.n	800137c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 020e 	bic.w	r2, r2, #14
 800131a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800132a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001358:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001370:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800137a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d00d      	beq.n	80013ce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2204      	movs	r2, #4
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e047      	b.n	800145e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 020e 	bic.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 021f 	and.w	r2, r3, #31
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800141a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001432:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800143c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
    }
  }
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001476:	e15a      	b.n	800172e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 814c 	beq.w	8001728 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d00b      	beq.n	80014b0 <HAL_GPIO_Init+0x48>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a4:	2b11      	cmp	r3, #17
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b12      	cmp	r3, #18
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 0201 	and.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0xea>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b12      	cmp	r3, #18
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0203 	and.w	r2, r3, #3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80a6 	beq.w	8001728 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015dc:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_GPIO_Init+0x2e4>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	4a5a      	ldr	r2, [pc, #360]	; (800174c <HAL_GPIO_Init+0x2e4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6613      	str	r3, [r2, #96]	; 0x60
 80015e8:	4b58      	ldr	r3, [pc, #352]	; (800174c <HAL_GPIO_Init+0x2e4>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161e:	d01f      	beq.n	8001660 <HAL_GPIO_Init+0x1f8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_GPIO_Init+0x2ec>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d019      	beq.n	800165c <HAL_GPIO_Init+0x1f4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x1f0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_GPIO_Init+0x2f4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1ec>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a49      	ldr	r2, [pc, #292]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1e8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a48      	ldr	r2, [pc, #288]	; (8001764 <HAL_GPIO_Init+0x2fc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1e4>
 8001648:	2305      	movs	r3, #5
 800164a:	e00a      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 800164c:	2306      	movs	r3, #6
 800164e:	e008      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 8001650:	2304      	movs	r3, #4
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 8001654:	2303      	movs	r3, #3
 8001656:	e004      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 8001658:	2302      	movs	r3, #2
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_GPIO_Init+0x1fa>
 8001660:	2300      	movs	r3, #0
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	4093      	lsls	r3, r2
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001672:	4937      	ldr	r1, [pc, #220]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_GPIO_Init+0x300>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a4:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_GPIO_Init+0x300>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_GPIO_Init+0x300>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ce:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_GPIO_Init+0x300>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_GPIO_Init+0x300>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x300>)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x300>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_GPIO_Init+0x300>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f ae9d 	bne.w	8001478 <HAL_GPIO_Init+0x10>
  }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000
 8001754:	48000400 	.word	0x48000400
 8001758:	48000800 	.word	0x48000800
 800175c:	48000c00 	.word	0x48000c00
 8001760:	48001000 	.word	0x48001000
 8001764:	48001400 	.word	0x48001400
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d141      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017aa:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d131      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017be:	4a46      	ldr	r2, [pc, #280]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d0:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2232      	movs	r2, #50	; 0x32
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ee:	e002      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d102      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f2      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d158      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e057      	b.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800182c:	e04d      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001834:	d141      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	d131      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2232      	movs	r2, #50	; 0x32
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187a:	e002      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3b01      	subs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d102      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d112      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e011      	b.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018b8:	e007      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40007000 	.word	0x40007000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	431bde83 	.word	0x431bde83

080018e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6093      	str	r3, [r2, #8]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007000 	.word	0x40007000

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e308      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d075      	beq.n	8001a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4ba0      	ldr	r3, [pc, #640]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d002      	beq.n	8001948 <HAL_RCC_OscConfig+0x44>
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b99      	ldr	r3, [pc, #612]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x108>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2e3      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x74>
 800196a:	4b91      	ldr	r3, [pc, #580]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a90      	ldr	r2, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a87      	ldr	r2, [pc, #540]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 800199c:	4b84      	ldr	r3, [pc, #528]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a83      	ldr	r2, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a80      	ldr	r2, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fba8 	bl	8001110 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fba4 	bl	8001110 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e2a8      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xc0>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb94 	bl	8001110 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fb90 	bl	8001110 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e294      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0xe8>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d075      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_OscConfig+0x136>
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d11f      	bne.n	8001a80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x154>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e267      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4952      	ldr	r1, [pc, #328]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a6c:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <HAL_RCC_OscConfig+0x2b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ffb5 	bl	80009e0 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d043      	beq.n	8001b04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e253      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb3c 	bl	8001110 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb38 	bl	8001110 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e23c      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aae:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	4939      	ldr	r1, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
 8001ace:	e01a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a36      	ldr	r2, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb18 	bl	8001110 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fb14 	bl	8001110 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e218      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff faf1 	bl	8001110 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff faed 	bl	8001110 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1f1      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0ef      	beq.n	8001b32 <HAL_RCC_OscConfig+0x22e>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fad4 	bl	8001110 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fad0 	bl	8001110 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1d4      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ef      	bne.n	8001b6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ab 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e005      	b.n	8001bba <HAL_RCC_OscConfig+0x2b6>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4baf      	ldr	r3, [pc, #700]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4aae      	ldr	r2, [pc, #696]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4bac      	ldr	r3, [pc, #688]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	4ba9      	ldr	r3, [pc, #676]	; (8001e80 <HAL_RCC_OscConfig+0x57c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be6:	4ba6      	ldr	r3, [pc, #664]	; (8001e80 <HAL_RCC_OscConfig+0x57c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4aa5      	ldr	r2, [pc, #660]	; (8001e80 <HAL_RCC_OscConfig+0x57c>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fa8d 	bl	8001110 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7ff fa89 	bl	8001110 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e18d      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b9c      	ldr	r3, [pc, #624]	; (8001e80 <HAL_RCC_OscConfig+0x57c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_RCC_OscConfig+0x32e>
 8001c20:	4b96      	ldr	r3, [pc, #600]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a95      	ldr	r2, [pc, #596]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	e024      	b.n	8001c7c <HAL_RCC_OscConfig+0x378>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d110      	bne.n	8001c5c <HAL_RCC_OscConfig+0x358>
 8001c3a:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	4a8e      	ldr	r2, [pc, #568]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	4a8a      	ldr	r2, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x378>
 8001c5c:	4b87      	ldr	r3, [pc, #540]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a86      	ldr	r2, [pc, #536]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a82      	ldr	r2, [pc, #520]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fa44 	bl	8001110 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fa40 	bl	8001110 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e142      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCC_OscConfig+0x388>
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa2d 	bl	8001110 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff fa29 	bl	8001110 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e12b      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ed      	bne.n	8001cba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d04:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	4a5c      	ldr	r2, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f9fc 	bl	8001110 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f9f8 	bl	8001110 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0fc      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x418>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d44:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f9df 	bl	8001110 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d56:	f7ff f9db 	bl	8001110 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0df      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80d3 	beq.w	8001f26 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d80:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	f000 808d 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d15a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f9b5 	bl	8001110 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f9b1 	bl	8001110 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0b5      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x580>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6a11      	ldr	r1, [r2, #32]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001de2:	0212      	lsls	r2, r2, #8
 8001de4:	4311      	orrs	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dea:	0852      	lsrs	r2, r2, #1
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0552      	lsls	r2, r2, #21
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0652      	lsls	r2, r2, #25
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e02:	06d2      	lsls	r2, r2, #27
 8001e04:	430a      	orrs	r2, r1
 8001e06:	491d      	ldr	r1, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff f974 	bl	8001110 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f970 	bl	8001110 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e074      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x528>
 8001e4a:	e06c      	b.n	8001f26 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f94c 	bl	8001110 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	e00e      	b.n	8001e9a <HAL_RCC_OscConfig+0x596>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f942 	bl	8001110 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e046      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x62c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x584>
 8001ea6:	e03e      	b.n	8001f26 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e039      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d12c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d123      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d113      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e11e      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d910      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b8e      	ldr	r3, [pc, #568]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 020f 	bic.w	r2, r3, #15
 8001f62:	498c      	ldr	r1, [pc, #560]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e106      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d073      	beq.n	8002070 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d129      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0f4      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fa0:	f000 f9d0 	bl	8002344 <RCC_GetSysClockFreqFromPLLSource>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a7c      	ldr	r2, [pc, #496]	; (800219c <HAL_RCC_ClockConfig+0x268>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d93f      	bls.n	800202e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d033      	beq.n	800202e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12f      	bne.n	800202e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd6:	4a70      	ldr	r2, [pc, #448]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e024      	b.n	800202e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0c6      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0be      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800200c:	f000 f8ce 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8002010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_RCC_ClockConfig+0x268>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d909      	bls.n	800202e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4957      	ldr	r1, [pc, #348]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002040:	f7ff f866 	bl	8001110 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff f862 	bl	8001110 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e095      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a42      	ldr	r2, [pc, #264]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020a0:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020a8:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d21d      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 020f 	bic.w	r2, r3, #15
 80020ec:	4929      	ldr	r1, [pc, #164]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f80c 	bl	8001110 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f808 	bl	8001110 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e03b      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d1ed      	bne.n	80020fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4917      	ldr	r1, [pc, #92]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490f      	ldr	r1, [pc, #60]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800215e:	f000 f825 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	490c      	ldr	r1, [pc, #48]	; (80021a0 <HAL_RCC_ClockConfig+0x26c>)
 8002170:	5ccb      	ldrb	r3, [r1, r3]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x270>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fc2c 	bl	80009e0 <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	04c4b400 	.word	0x04c4b400
 80021a0:	080051f8 	.word	0x080051f8
 80021a4:	20000004 	.word	0x20000004
 80021a8:	20000008 	.word	0x20000008

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e047      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e03e      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d136      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	68d2      	ldr	r2, [r2, #12]
 800220c:	0a12      	lsrs	r2, r2, #8
 800220e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
      break;
 8002218:	e00c      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	0a12      	lsrs	r2, r2, #8
 8002228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
      break;
 8002232:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e001      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	4618      	mov	r0, r3
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	00f42400 	.word	0x00f42400
 800226c:	016e3600 	.word	0x016e3600

08002270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCC_GetHCLKFreq+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800228c:	f7ff fff0 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08005208 	.word	0x08005208

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b8:	f7ff ffda 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0adb      	lsrs	r3, r3, #11
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4904      	ldr	r1, [pc, #16]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08005208 	.word	0x08005208

080022e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	220f      	movs	r2, #15
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCC_GetClockConfig+0x60>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40022000 	.word	0x40022000

08002344 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d10c      	bne.n	8002382 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002372:	68d2      	ldr	r2, [r2, #12]
 8002374:	0a12      	lsrs	r2, r2, #8
 8002376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
    break;
 8002380:	e00c      	b.n	800239c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	0a12      	lsrs	r2, r2, #8
 8002390:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    break;
 800239a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0e5b      	lsrs	r3, r3, #25
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	016e3600 	.word	0x016e3600
 80023cc:	00f42400 	.word	0x00f42400

080023d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d8:	2300      	movs	r3, #0
 80023da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023dc:	2300      	movs	r3, #0
 80023de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8098 	beq.w	800251e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a39      	ldr	r2, [pc, #228]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002426:	f7fe fe73 	bl	8001110 <HAL_GetTick>
 800242a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242c:	e009      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7fe fe6f 	bl	8001110 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d902      	bls.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	74fb      	strb	r3, [r7, #19]
        break;
 8002440:	e005      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ef      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d159      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01e      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	d019      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800247c:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fe2f 	bl	8001110 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b4:	e00b      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fe2b 	bl	8001110 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d902      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	74fb      	strb	r3, [r7, #19]
            break;
 80024cc:	e006      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ec      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4903      	ldr	r1, [pc, #12]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024f8:	e008      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
 80024fe:	e005      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250c:	7c7b      	ldrb	r3, [r7, #17]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4ba6      	ldr	r3, [pc, #664]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4aa5      	ldr	r2, [pc, #660]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252a:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 0203 	bic.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	499c      	ldr	r1, [pc, #624]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254c:	4b97      	ldr	r3, [pc, #604]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 020c 	bic.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4994      	ldr	r1, [pc, #592]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256e:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	498b      	ldr	r1, [pc, #556]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4983      	ldr	r1, [pc, #524]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b2:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	497a      	ldr	r1, [pc, #488]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d4:	4b75      	ldr	r3, [pc, #468]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4972      	ldr	r1, [pc, #456]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f6:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4969      	ldr	r1, [pc, #420]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002618:	4b64      	ldr	r3, [pc, #400]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4961      	ldr	r1, [pc, #388]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800263a:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	4958      	ldr	r1, [pc, #352]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	4950      	ldr	r1, [pc, #320]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a4a      	ldr	r2, [pc, #296]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002694:	4b45      	ldr	r3, [pc, #276]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	4942      	ldr	r1, [pc, #264]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ea:	d105      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ec:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a2e      	ldr	r2, [pc, #184]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	4926      	ldr	r1, [pc, #152]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002722:	d105      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	4918      	ldr	r1, [pc, #96]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275a:	d105      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002766:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002792:	d105      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e049      	b.n	8002856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f841 	bl	800285e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 fa52 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04a      	b.n	8002922 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_TIM_Base_Start_IT+0xbc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_TIM_Base_Start_IT+0xc0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_TIM_Base_Start_IT+0xc4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HAL_TIM_Base_Start_IT+0xc8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_TIM_Base_Start_IT+0xcc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d115      	bne.n	800290c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_TIM_Base_Start_IT+0xd0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d015      	beq.n	800291e <HAL_TIM_Base_Start_IT+0xaa>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d011      	beq.n	800291e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	e008      	b.n	800291e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e000      	b.n	8002920 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40013400 	.word	0x40013400
 8002940:	40014000 	.word	0x40014000
 8002944:	00010007 	.word	0x00010007

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f965 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f957 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f968 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f93b 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f92d 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f93e 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f911 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f903 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f914 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8e7 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8d9 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8ea 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd ff02 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f96a 	bl	8002dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d10e      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d107      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f95d 	bl	8002de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d10e      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f898 	bl	8002c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0220 	mvn.w	r2, #32
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f91d 	bl	8002db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8c:	d10f      	bne.n	8002bae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f923 	bl	8002df4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bbc:	d10f      	bne.n	8002bde <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f915 	bl	8002e08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bec:	d10f      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f907 	bl	8002e1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c1c:	d10f      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8f9 	bl	8002e30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3c      	ldr	r2, [pc, #240]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <TIM_Base_SetConfig+0x108>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <TIM_Base_SetConfig+0x10c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a37      	ldr	r2, [pc, #220]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <TIM_Base_SetConfig+0x108>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <TIM_Base_SetConfig+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800

08002db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e042      	b.n	8002edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fd6d 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fb66 	bl	8003558 <UART_SetConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fdf8 	bl	8003a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fe7f 	bl	8003bd8 <UART_CheckIdleState>
 8002eda:	4603      	mov	r3, r0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 8083 	bne.w	8003006 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_UART_Transmit+0x28>
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07b      	b.n	8003008 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit+0x3a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e074      	b.n	8003008 <HAL_UART_Transmit+0x124>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	; 0x21
 8002f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f36:	f7fe f8eb 	bl	8001110 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d108      	bne.n	8002f68 <HAL_UART_Transmit+0x84>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e003      	b.n	8002f70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002f78:	e02c      	b.n	8002fd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fe72 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e039      	b.n	8003008 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3302      	adds	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e007      	b.n	8002fc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1cc      	bne.n	8002f7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fe3f 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e006      	b.n	8003008 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	2b20      	cmp	r3, #32
 8003026:	d131      	bne.n	800308c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Receive_IT+0x24>
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02a      	b.n	800308e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Receive_IT+0x36>
 8003042:	2302      	movs	r3, #2
 8003044:	e023      	b.n	800308e <HAL_UART_Receive_IT+0x7e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_UART_Receive_IT+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800307a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	461a      	mov	r2, r3
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fe74 	bl	8003d70 <UART_Start_Receive_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	e000      	b.n	800308e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40008000 	.word	0x40008000

0800309c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f640 030f 	movw	r3, #2063	; 0x80f
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d118      	bne.n	80030fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 81fb 	beq.w	80034ea <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
      }
      return;
 80030fc:	e1f5      	b.n	80034ea <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80ef 	beq.w	80032e4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_UART_IRQHandler+0x23c>)
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4b72      	ldr	r3, [pc, #456]	; (80032dc <HAL_UART_IRQHandler+0x240>)
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80e4 	beq.w	80032e4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_UART_IRQHandler+0xac>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_UART_IRQHandler+0xd8>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2202      	movs	r2, #2
 8003162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_UART_IRQHandler+0x104>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2204      	movs	r2, #4
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4b48      	ldr	r3, [pc, #288]	; (80032d8 <HAL_UART_IRQHandler+0x23c>)
 80031b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2208      	movs	r2, #8
 80031c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031cc:	f043 0208 	orr.w	r2, r3, #8
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d011      	beq.n	8003204 <HAL_UART_IRQHandler+0x168>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 816f 	beq.w	80034ee <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d004      	beq.n	800325e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d031      	beq.n	80032c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fe44 	bl	8003eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d123      	bne.n	80032ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003280:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800328e:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <HAL_UART_IRQHandler+0x244>)
 8003290:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f87f 	bl	800139a <HAL_DMA_Abort_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00f      	b.n	80032d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f93a 	bl	800352c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00b      	b.n	80032d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f936 	bl	800352c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e007      	b.n	80032d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f932 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80032d0:	e10d      	b.n	80034ee <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	bf00      	nop
    return;
 80032d4:	e10b      	b.n	80034ee <HAL_UART_IRQHandler+0x452>
 80032d6:	bf00      	nop
 80032d8:	10000001 	.word	0x10000001
 80032dc:	04000120 	.word	0x04000120
 80032e0:	08003f51 	.word	0x08003f51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 80ab 	bne.w	8003444 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a5 	beq.w	8003444 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 809f 	beq.w	8003444 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d155      	bne.n	80033c8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003326:	893b      	ldrh	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80e2 	beq.w	80034f2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003334:	893a      	ldrh	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	f080 80db 	bcs.w	80034f2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	893a      	ldrh	r2, [r7, #8]
 8003340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d12b      	bne.n	80033ac <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003382:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0210 	bic.w	r2, r2, #16
 80033a0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd ff9e 	bl	80012e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8bd 	bl	8003540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033c6:	e094      	b.n	80034f2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80033e8:	897b      	ldrh	r3, [r7, #10]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8083 	beq.w	80034f6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0210 	bic.w	r2, r2, #16
 8003436:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003438:	897b      	ldrh	r3, [r7, #10]
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f87f 	bl	8003540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003442:	e058      	b.n	80034f6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_UART_IRQHandler+0x3ce>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 f880 	bl	8004568 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003468:	e048      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	2b00      	cmp	r3, #0
 800348e:	d034      	beq.n	80034fa <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
    }
    return;
 8003498:	e02f      	b.n	80034fa <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_UART_IRQHandler+0x41a>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd64 	bl	8003f7c <UART_EndTransmit_IT>
    return;
 80034b4:	e022      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_UART_IRQHandler+0x436>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 f860 	bl	8004590 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034d0:	e014      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00f      	beq.n	80034fc <HAL_UART_IRQHandler+0x460>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da0c      	bge.n	80034fc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f001 f84a 	bl	800457c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034e8:	e008      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
      return;
 80034ea:	bf00      	nop
 80034ec:	e006      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
    return;
 80034ee:	bf00      	nop
 80034f0:	e004      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
      return;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
      return;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_UART_IRQHandler+0x460>
    return;
 80034fa:	bf00      	nop
  }
}
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop

08003504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4baf      	ldr	r3, [pc, #700]	; (8003840 <UART_SetConfig+0x2e8>)
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	430b      	orrs	r3, r1
 800358e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4aa4      	ldr	r2, [pc, #656]	; (8003844 <UART_SetConfig+0x2ec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f023 010f 	bic.w	r1, r3, #15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a95      	ldr	r2, [pc, #596]	; (8003848 <UART_SetConfig+0x2f0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <UART_SetConfig+0xe2>
 80035f8:	4b94      	ldr	r3, [pc, #592]	; (800384c <UART_SetConfig+0x2f4>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d816      	bhi.n	8003634 <UART_SetConfig+0xdc>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0xb4>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	0800361d 	.word	0x0800361d
 8003610:	08003629 	.word	0x08003629
 8003614:	08003623 	.word	0x08003623
 8003618:	0800362f 	.word	0x0800362f
 800361c:	2301      	movs	r3, #1
 800361e:	76fb      	strb	r3, [r7, #27]
 8003620:	e0bc      	b.n	800379c <UART_SetConfig+0x244>
 8003622:	2302      	movs	r3, #2
 8003624:	76fb      	strb	r3, [r7, #27]
 8003626:	e0b9      	b.n	800379c <UART_SetConfig+0x244>
 8003628:	2304      	movs	r3, #4
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e0b6      	b.n	800379c <UART_SetConfig+0x244>
 800362e:	2308      	movs	r3, #8
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e0b3      	b.n	800379c <UART_SetConfig+0x244>
 8003634:	2310      	movs	r3, #16
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e0b0      	b.n	800379c <UART_SetConfig+0x244>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a84      	ldr	r2, [pc, #528]	; (8003850 <UART_SetConfig+0x2f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d132      	bne.n	80036aa <UART_SetConfig+0x152>
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <UART_SetConfig+0x2f4>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d828      	bhi.n	80036a4 <UART_SetConfig+0x14c>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0x100>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036a5 	.word	0x080036a5
 8003660:	080036a5 	.word	0x080036a5
 8003664:	080036a5 	.word	0x080036a5
 8003668:	08003699 	.word	0x08003699
 800366c:	080036a5 	.word	0x080036a5
 8003670:	080036a5 	.word	0x080036a5
 8003674:	080036a5 	.word	0x080036a5
 8003678:	08003693 	.word	0x08003693
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036a5 	.word	0x080036a5
 8003684:	080036a5 	.word	0x080036a5
 8003688:	0800369f 	.word	0x0800369f
 800368c:	2300      	movs	r3, #0
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e084      	b.n	800379c <UART_SetConfig+0x244>
 8003692:	2302      	movs	r3, #2
 8003694:	76fb      	strb	r3, [r7, #27]
 8003696:	e081      	b.n	800379c <UART_SetConfig+0x244>
 8003698:	2304      	movs	r3, #4
 800369a:	76fb      	strb	r3, [r7, #27]
 800369c:	e07e      	b.n	800379c <UART_SetConfig+0x244>
 800369e:	2308      	movs	r3, #8
 80036a0:	76fb      	strb	r3, [r7, #27]
 80036a2:	e07b      	b.n	800379c <UART_SetConfig+0x244>
 80036a4:	2310      	movs	r3, #16
 80036a6:	76fb      	strb	r3, [r7, #27]
 80036a8:	e078      	b.n	800379c <UART_SetConfig+0x244>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a69      	ldr	r2, [pc, #420]	; (8003854 <UART_SetConfig+0x2fc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d120      	bne.n	80036f6 <UART_SetConfig+0x19e>
 80036b4:	4b65      	ldr	r3, [pc, #404]	; (800384c <UART_SetConfig+0x2f4>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036be:	2b30      	cmp	r3, #48	; 0x30
 80036c0:	d013      	beq.n	80036ea <UART_SetConfig+0x192>
 80036c2:	2b30      	cmp	r3, #48	; 0x30
 80036c4:	d814      	bhi.n	80036f0 <UART_SetConfig+0x198>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d009      	beq.n	80036de <UART_SetConfig+0x186>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d810      	bhi.n	80036f0 <UART_SetConfig+0x198>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <UART_SetConfig+0x180>
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d006      	beq.n	80036e4 <UART_SetConfig+0x18c>
 80036d6:	e00b      	b.n	80036f0 <UART_SetConfig+0x198>
 80036d8:	2300      	movs	r3, #0
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e05e      	b.n	800379c <UART_SetConfig+0x244>
 80036de:	2302      	movs	r3, #2
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e05b      	b.n	800379c <UART_SetConfig+0x244>
 80036e4:	2304      	movs	r3, #4
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e058      	b.n	800379c <UART_SetConfig+0x244>
 80036ea:	2308      	movs	r3, #8
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e055      	b.n	800379c <UART_SetConfig+0x244>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e052      	b.n	800379c <UART_SetConfig+0x244>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a57      	ldr	r2, [pc, #348]	; (8003858 <UART_SetConfig+0x300>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d120      	bne.n	8003742 <UART_SetConfig+0x1ea>
 8003700:	4b52      	ldr	r3, [pc, #328]	; (800384c <UART_SetConfig+0x2f4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800370a:	2bc0      	cmp	r3, #192	; 0xc0
 800370c:	d013      	beq.n	8003736 <UART_SetConfig+0x1de>
 800370e:	2bc0      	cmp	r3, #192	; 0xc0
 8003710:	d814      	bhi.n	800373c <UART_SetConfig+0x1e4>
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d009      	beq.n	800372a <UART_SetConfig+0x1d2>
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d810      	bhi.n	800373c <UART_SetConfig+0x1e4>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <UART_SetConfig+0x1cc>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d006      	beq.n	8003730 <UART_SetConfig+0x1d8>
 8003722:	e00b      	b.n	800373c <UART_SetConfig+0x1e4>
 8003724:	2300      	movs	r3, #0
 8003726:	76fb      	strb	r3, [r7, #27]
 8003728:	e038      	b.n	800379c <UART_SetConfig+0x244>
 800372a:	2302      	movs	r3, #2
 800372c:	76fb      	strb	r3, [r7, #27]
 800372e:	e035      	b.n	800379c <UART_SetConfig+0x244>
 8003730:	2304      	movs	r3, #4
 8003732:	76fb      	strb	r3, [r7, #27]
 8003734:	e032      	b.n	800379c <UART_SetConfig+0x244>
 8003736:	2308      	movs	r3, #8
 8003738:	76fb      	strb	r3, [r7, #27]
 800373a:	e02f      	b.n	800379c <UART_SetConfig+0x244>
 800373c:	2310      	movs	r3, #16
 800373e:	76fb      	strb	r3, [r7, #27]
 8003740:	e02c      	b.n	800379c <UART_SetConfig+0x244>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3f      	ldr	r2, [pc, #252]	; (8003844 <UART_SetConfig+0x2ec>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d125      	bne.n	8003798 <UART_SetConfig+0x240>
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <UART_SetConfig+0x2f4>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800375a:	d017      	beq.n	800378c <UART_SetConfig+0x234>
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003760:	d817      	bhi.n	8003792 <UART_SetConfig+0x23a>
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	d00b      	beq.n	8003780 <UART_SetConfig+0x228>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376c:	d811      	bhi.n	8003792 <UART_SetConfig+0x23a>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <UART_SetConfig+0x222>
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d006      	beq.n	8003786 <UART_SetConfig+0x22e>
 8003778:	e00b      	b.n	8003792 <UART_SetConfig+0x23a>
 800377a:	2300      	movs	r3, #0
 800377c:	76fb      	strb	r3, [r7, #27]
 800377e:	e00d      	b.n	800379c <UART_SetConfig+0x244>
 8003780:	2302      	movs	r3, #2
 8003782:	76fb      	strb	r3, [r7, #27]
 8003784:	e00a      	b.n	800379c <UART_SetConfig+0x244>
 8003786:	2304      	movs	r3, #4
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	e007      	b.n	800379c <UART_SetConfig+0x244>
 800378c:	2308      	movs	r3, #8
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e004      	b.n	800379c <UART_SetConfig+0x244>
 8003792:	2310      	movs	r3, #16
 8003794:	76fb      	strb	r3, [r7, #27]
 8003796:	e001      	b.n	800379c <UART_SetConfig+0x244>
 8003798:	2310      	movs	r3, #16
 800379a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <UART_SetConfig+0x2ec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f040 809e 	bne.w	80038e4 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037a8:	7efb      	ldrb	r3, [r7, #27]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d823      	bhi.n	80037f6 <UART_SetConfig+0x29e>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x25c>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037f7 	.word	0x080037f7
 80037c4:	080037e7 	.word	0x080037e7
 80037c8:	080037f7 	.word	0x080037f7
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	080037f7 	.word	0x080037f7
 80037d4:	080037ef 	.word	0x080037ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d8:	f7fe fd56 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80037dc:	6178      	str	r0, [r7, #20]
        break;
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <UART_SetConfig+0x304>)
 80037e2:	617b      	str	r3, [r7, #20]
        break;
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e6:	f7fe fce1 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 80037ea:	6178      	str	r0, [r7, #20]
        break;
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f2:	617b      	str	r3, [r7, #20]
        break;
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	76bb      	strb	r3, [r7, #26]
        break;
 80037fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 812e 	beq.w	8003a64 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <UART_SetConfig+0x308>)
 800380e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003812:	461a      	mov	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fbb3 f3f2 	udiv	r3, r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d305      	bcc.n	8003838 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d915      	bls.n	8003864 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	76bb      	strb	r3, [r7, #26]
 800383c:	e112      	b.n	8003a64 <UART_SetConfig+0x50c>
 800383e:	bf00      	nop
 8003840:	cfff69f3 	.word	0xcfff69f3
 8003844:	40008000 	.word	0x40008000
 8003848:	40013800 	.word	0x40013800
 800384c:	40021000 	.word	0x40021000
 8003850:	40004400 	.word	0x40004400
 8003854:	40004800 	.word	0x40004800
 8003858:	40004c00 	.word	0x40004c00
 800385c:	00f42400 	.word	0x00f42400
 8003860:	08005210 	.word	0x08005210
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4618      	mov	r0, r3
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	4a86      	ldr	r2, [pc, #536]	; (8003a8c <UART_SetConfig+0x534>)
 8003872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003876:	b29a      	uxth	r2, r3
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f7fc fd20 	bl	80002c0 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	020b      	lsls	r3, r1, #8
 8003892:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003896:	0202      	lsls	r2, r0, #8
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	0849      	lsrs	r1, r1, #1
 800389e:	4608      	mov	r0, r1
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	1814      	adds	r4, r2, r0
 80038a6:	eb43 0501 	adc.w	r5, r3, r1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	f7fc fd02 	bl	80002c0 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ca:	d308      	bcc.n	80038de <UART_SetConfig+0x386>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d2:	d204      	bcs.n	80038de <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	e0c2      	b.n	8003a64 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	76bb      	strb	r3, [r7, #26]
 80038e2:	e0bf      	b.n	8003a64 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ec:	d165      	bne.n	80039ba <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80038ee:	7efb      	ldrb	r3, [r7, #27]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d828      	bhi.n	8003946 <UART_SetConfig+0x3ee>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <UART_SetConfig+0x3a4>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003929 	.word	0x08003929
 8003904:	08003931 	.word	0x08003931
 8003908:	08003947 	.word	0x08003947
 800390c:	08003937 	.word	0x08003937
 8003910:	08003947 	.word	0x08003947
 8003914:	08003947 	.word	0x08003947
 8003918:	08003947 	.word	0x08003947
 800391c:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7fe fcb2 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003924:	6178      	str	r0, [r7, #20]
        break;
 8003926:	e013      	b.n	8003950 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fcc4 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 800392c:	6178      	str	r0, [r7, #20]
        break;
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <UART_SetConfig+0x538>)
 8003932:	617b      	str	r3, [r7, #20]
        break;
 8003934:	e00c      	b.n	8003950 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe fc39 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800393a:	6178      	str	r0, [r7, #20]
        break;
 800393c:	e008      	b.n	8003950 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	617b      	str	r3, [r7, #20]
        break;
 8003944:	e004      	b.n	8003950 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	76bb      	strb	r3, [r7, #26]
        break;
 800394e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8086 	beq.w	8003a64 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <UART_SetConfig+0x534>)
 800395e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003962:	461a      	mov	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fbb3 f3f2 	udiv	r3, r3, r2
 800396a:	005a      	lsls	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	b29b      	uxth	r3, r3
 800397e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d916      	bls.n	80039b4 <UART_SetConfig+0x45c>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d212      	bcs.n	80039b4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f023 030f 	bic.w	r3, r3, #15
 8003996:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	89fa      	ldrh	r2, [r7, #14]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e057      	b.n	8003a64 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	76bb      	strb	r3, [r7, #26]
 80039b8:	e054      	b.n	8003a64 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ba:	7efb      	ldrb	r3, [r7, #27]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d828      	bhi.n	8003a12 <UART_SetConfig+0x4ba>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x470>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003a13 	.word	0x08003a13
 80039d8:	08003a03 	.word	0x08003a03
 80039dc:	08003a13 	.word	0x08003a13
 80039e0:	08003a13 	.word	0x08003a13
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a0b 	.word	0x08003a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fc4c 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80039f0:	6178      	str	r0, [r7, #20]
        break;
 80039f2:	e013      	b.n	8003a1c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f4:	f7fe fc5e 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 80039f8:	6178      	str	r0, [r7, #20]
        break;
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <UART_SetConfig+0x538>)
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e00c      	b.n	8003a1c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe fbd3 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8003a06:	6178      	str	r0, [r7, #20]
        break;
 8003a08:	e008      	b.n	8003a1c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	617b      	str	r3, [r7, #20]
        break;
 8003a10:	e004      	b.n	8003a1c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	76bb      	strb	r3, [r7, #26]
        break;
 8003a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <UART_SetConfig+0x534>)
 8003a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	441a      	add	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	d908      	bls.n	8003a60 <UART_SetConfig+0x508>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d204      	bcs.n	8003a60 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	e001      	b.n	8003a64 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a80:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	08005210 	.word	0x08005210
 8003a90:	00f42400 	.word	0x00f42400

08003a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01a      	beq.n	8003baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b92:	d10a      	bne.n	8003baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be8:	f7fd fa92 	bl	8001110 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d10e      	bne.n	8003c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f82f 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e025      	b.n	8003c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d10e      	bne.n	8003c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f819 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e00f      	b.n	8003c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	e062      	b.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d05e      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fd fa42 	bl	8001110 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e045      	b.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02e      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	d126      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e00f      	b.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d08d      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da2:	d10e      	bne.n	8003dc2 <UART_Start_Receive_IT+0x52>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <UART_Start_Receive_IT+0x48>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003db6:	e02d      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003dc0:	e028      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <UART_Start_Receive_IT+0x76>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <UART_Start_Receive_IT+0x6c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003dda:	e01b      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	227f      	movs	r2, #127	; 0x7f
 8003de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003de4:	e016      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dee:	d10d      	bne.n	8003e0c <UART_Start_Receive_IT+0x9c>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <UART_Start_Receive_IT+0x92>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	227f      	movs	r2, #127	; 0x7f
 8003dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e00:	e008      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	223f      	movs	r2, #63	; 0x3f
 8003e06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e0a:	e003      	b.n	8003e14 <UART_Start_Receive_IT+0xa4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2222      	movs	r2, #34	; 0x22
 8003e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d12a      	bne.n	8003e94 <UART_Start_Receive_IT+0x124>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d324      	bcc.n	8003e94 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d107      	bne.n	8003e64 <UART_Start_Receive_IT+0xf4>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <UART_Start_Receive_IT+0x16c>)
 8003e60:	671a      	str	r2, [r3, #112]	; 0x70
 8003e62:	e002      	b.n	8003e6a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <UART_Start_Receive_IT+0x170>)
 8003e68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	e01b      	b.n	8003ecc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d107      	bne.n	8003eae <UART_Start_Receive_IT+0x13e>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <UART_Start_Receive_IT+0x174>)
 8003eaa:	671a      	str	r2, [r3, #112]	; 0x70
 8003eac:	e002      	b.n	8003eb4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <UART_Start_Receive_IT+0x178>)
 8003eb2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003eca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	08004365 	.word	0x08004365
 8003ee0:	08004161 	.word	0x08004161
 8003ee4:	08004089 	.word	0x08004089
 8003ee8:	08003fb1 	.word	0x08003fb1

08003eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0210 	bic.w	r2, r2, #16
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fadc 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff faae 	bl	8003504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003fbe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	2b22      	cmp	r3, #34	; 0x22
 8003fc8:	d152      	bne.n	8004070 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fd2:	89bb      	ldrh	r3, [r7, #12]
 8003fd4:	b2d9      	uxtb	r1, r3
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	400a      	ands	r2, r1
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d139      	bne.n	8004080 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800401a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10f      	bne.n	8004062 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0210 	bic.w	r2, r2, #16
 8004050:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fa70 	bl	8003540 <HAL_UARTEx_RxEventCallback>
 8004060:	e002      	b.n	8004068 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fa58 	bl	8003518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800406e:	e007      	b.n	8004080 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0208 	orr.w	r2, r2, #8
 800407e:	619a      	str	r2, [r3, #24]
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004096:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	2b22      	cmp	r3, #34	; 0x22
 80040a0:	d152      	bne.n	8004148 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80040b0:	89ba      	ldrh	r2, [r7, #12]
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d139      	bne.n	8004158 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10f      	bne.n	800413a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0210 	bic.w	r2, r2, #16
 8004128:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fa04 	bl	8003540 <HAL_UARTEx_RxEventCallback>
 8004138:	e002      	b.n	8004140 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff f9ec 	bl	8003518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004146:	e007      	b.n	8004158 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	619a      	str	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800416e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	f040 80da 	bne.w	8004348 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800419a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800419c:	e0aa      	b.n	80042f4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041a6:	89bb      	ldrh	r3, [r7, #12]
 80041a8:	b2d9      	uxtb	r1, r3
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	400a      	ands	r2, r1
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04d      	beq.n	8004282 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <UART_RxISR_8BIT_FIFOEN+0xde>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	f043 0204 	orr.w	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2204      	movs	r2, #4
 8004258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004260:	f043 0202 	orr.w	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff f959 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d132      	bne.n	80042f4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800429c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10f      	bne.n	80042e8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0210 	bic.w	r2, r2, #16
 80042d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff f92d 	bl	8003540 <HAL_UARTEx_RxEventCallback>
 80042e6:	e002      	b.n	80042ee <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff f915 	bl	8003518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af4c 	bne.w	800419e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800430c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d021      	beq.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800431a:	897a      	ldrh	r2, [r7, #10]
 800431c:	429a      	cmp	r2, r3
 800431e:	d21b      	bcs.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800432e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8004334:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0220 	orr.w	r2, r2, #32
 8004344:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004346:	e007      	b.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0208 	orr.w	r2, r2, #8
 8004356:	619a      	str	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08003fb1 	.word	0x08003fb1

08004364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004372:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	2b22      	cmp	r3, #34	; 0x22
 8004394:	f040 80da 	bne.w	800454c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800439e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043a0:	e0aa      	b.n	80044f8 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80043b0:	8aba      	ldrh	r2, [r7, #20]
 80043b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04d      	beq.n	8004486 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d010      	beq.n	8004416 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d010      	beq.n	8004442 <UART_RxISR_16BIT_FIFOEN+0xde>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2202      	movs	r2, #2
 8004430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d010      	beq.n	800446e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2204      	movs	r2, #4
 800445c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff f857 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d132      	bne.n	80044f8 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10f      	bne.n	80044ec <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0210 	bic.w	r2, r2, #16
 80044da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff f82b 	bl	8003540 <HAL_UARTEx_RxEventCallback>
 80044ea:	e002      	b.n	80044f2 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff f813 	bl	8003518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044f8:	8afb      	ldrh	r3, [r7, #22]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f af4c 	bne.w	80043a2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004510:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004512:	89fb      	ldrh	r3, [r7, #14]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d021      	beq.n	800455c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800451e:	89fa      	ldrh	r2, [r7, #14]
 8004520:	429a      	cmp	r2, r3
 8004522:	d21b      	bcs.n	800455c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004532:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8004538:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0220 	orr.w	r2, r2, #32
 8004548:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800454a:	e007      	b.n	800455c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0208 	orr.w	r2, r2, #8
 800455a:	619a      	str	r2, [r3, #24]
}
 800455c:	bf00      	nop
 800455e:	3728      	adds	r7, #40	; 0x28
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08004089 	.word	0x08004089

08004568 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_UARTEx_DisableFifoMode+0x16>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e027      	b.n	800460a <HAL_UARTEx_DisableFifoMode+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2224      	movs	r2, #36	; 0x24
 80045c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800462a:	2302      	movs	r3, #2
 800462c:	e02d      	b.n	800468a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	; 0x24
 800463a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f850 	bl	8004710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e02d      	b.n	8004706 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f812 	bl	8004710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004730:	e031      	b.n	8004796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004732:	2308      	movs	r3, #8
 8004734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004736:	2308      	movs	r3, #8
 8004738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	0e5b      	lsrs	r3, r3, #25
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	0f5b      	lsrs	r3, r3, #29
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800475a:	7bbb      	ldrb	r3, [r7, #14]
 800475c:	7b3a      	ldrb	r2, [r7, #12]
 800475e:	4911      	ldr	r1, [pc, #68]	; (80047a4 <UARTEx_SetNbDataToProcess+0x94>)
 8004760:	5c8a      	ldrb	r2, [r1, r2]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004766:	7b3a      	ldrb	r2, [r7, #12]
 8004768:	490f      	ldr	r1, [pc, #60]	; (80047a8 <UARTEx_SetNbDataToProcess+0x98>)
 800476a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800476c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	7b7a      	ldrb	r2, [r7, #13]
 800477c:	4909      	ldr	r1, [pc, #36]	; (80047a4 <UARTEx_SetNbDataToProcess+0x94>)
 800477e:	5c8a      	ldrb	r2, [r1, r2]
 8004780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004784:	7b7a      	ldrb	r2, [r7, #13]
 8004786:	4908      	ldr	r1, [pc, #32]	; (80047a8 <UARTEx_SetNbDataToProcess+0x98>)
 8004788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800478a:	fb93 f3f2 	sdiv	r3, r3, r2
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	08005228 	.word	0x08005228
 80047a8:	08005230 	.word	0x08005230

080047ac <atoi>:
 80047ac:	220a      	movs	r2, #10
 80047ae:	2100      	movs	r1, #0
 80047b0:	f000 b99e 	b.w	8004af0 <strtol>

080047b4 <__errno>:
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <__errno+0x8>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000010 	.word	0x20000010

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <__libc_init_array+0x38>)
 80047c4:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	2600      	movs	r6, #0
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <__libc_init_array+0x40>)
 80047d2:	4c0c      	ldr	r4, [pc, #48]	; (8004804 <__libc_init_array+0x44>)
 80047d4:	f000 fcdc 	bl	8005190 <_init>
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	2600      	movs	r6, #0
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	08005374 	.word	0x08005374
 80047fc:	08005374 	.word	0x08005374
 8004800:	08005374 	.word	0x08005374
 8004804:	08005378 	.word	0x08005378

08004808 <memcpy>:
 8004808:	440a      	add	r2, r1
 800480a:	4291      	cmp	r1, r2
 800480c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004810:	d100      	bne.n	8004814 <memcpy+0xc>
 8004812:	4770      	bx	lr
 8004814:	b510      	push	{r4, lr}
 8004816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481e:	4291      	cmp	r1, r2
 8004820:	d1f9      	bne.n	8004816 <memcpy+0xe>
 8004822:	bd10      	pop	{r4, pc}

08004824 <memset>:
 8004824:	4402      	add	r2, r0
 8004826:	4603      	mov	r3, r0
 8004828:	4293      	cmp	r3, r2
 800482a:	d100      	bne.n	800482e <memset+0xa>
 800482c:	4770      	bx	lr
 800482e:	f803 1b01 	strb.w	r1, [r3], #1
 8004832:	e7f9      	b.n	8004828 <memset+0x4>

08004834 <_free_r>:
 8004834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004836:	2900      	cmp	r1, #0
 8004838:	d048      	beq.n	80048cc <_free_r+0x98>
 800483a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800483e:	9001      	str	r0, [sp, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f1a1 0404 	sub.w	r4, r1, #4
 8004846:	bfb8      	it	lt
 8004848:	18e4      	addlt	r4, r4, r3
 800484a:	f000 f95b 	bl	8004b04 <__malloc_lock>
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <_free_r+0x9c>)
 8004850:	9801      	ldr	r0, [sp, #4]
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	4615      	mov	r5, r2
 8004856:	b933      	cbnz	r3, 8004866 <_free_r+0x32>
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	6014      	str	r4, [r2, #0]
 800485c:	b003      	add	sp, #12
 800485e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004862:	f000 b955 	b.w	8004b10 <__malloc_unlock>
 8004866:	42a3      	cmp	r3, r4
 8004868:	d90b      	bls.n	8004882 <_free_r+0x4e>
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	1862      	adds	r2, r4, r1
 800486e:	4293      	cmp	r3, r2
 8004870:	bf04      	itt	eq
 8004872:	681a      	ldreq	r2, [r3, #0]
 8004874:	685b      	ldreq	r3, [r3, #4]
 8004876:	6063      	str	r3, [r4, #4]
 8004878:	bf04      	itt	eq
 800487a:	1852      	addeq	r2, r2, r1
 800487c:	6022      	streq	r2, [r4, #0]
 800487e:	602c      	str	r4, [r5, #0]
 8004880:	e7ec      	b.n	800485c <_free_r+0x28>
 8004882:	461a      	mov	r2, r3
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b10b      	cbz	r3, 800488c <_free_r+0x58>
 8004888:	42a3      	cmp	r3, r4
 800488a:	d9fa      	bls.n	8004882 <_free_r+0x4e>
 800488c:	6811      	ldr	r1, [r2, #0]
 800488e:	1855      	adds	r5, r2, r1
 8004890:	42a5      	cmp	r5, r4
 8004892:	d10b      	bne.n	80048ac <_free_r+0x78>
 8004894:	6824      	ldr	r4, [r4, #0]
 8004896:	4421      	add	r1, r4
 8004898:	1854      	adds	r4, r2, r1
 800489a:	42a3      	cmp	r3, r4
 800489c:	6011      	str	r1, [r2, #0]
 800489e:	d1dd      	bne.n	800485c <_free_r+0x28>
 80048a0:	681c      	ldr	r4, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	6053      	str	r3, [r2, #4]
 80048a6:	4421      	add	r1, r4
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	e7d7      	b.n	800485c <_free_r+0x28>
 80048ac:	d902      	bls.n	80048b4 <_free_r+0x80>
 80048ae:	230c      	movs	r3, #12
 80048b0:	6003      	str	r3, [r0, #0]
 80048b2:	e7d3      	b.n	800485c <_free_r+0x28>
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	1961      	adds	r1, r4, r5
 80048b8:	428b      	cmp	r3, r1
 80048ba:	bf04      	itt	eq
 80048bc:	6819      	ldreq	r1, [r3, #0]
 80048be:	685b      	ldreq	r3, [r3, #4]
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	bf04      	itt	eq
 80048c4:	1949      	addeq	r1, r1, r5
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	6054      	str	r4, [r2, #4]
 80048ca:	e7c7      	b.n	800485c <_free_r+0x28>
 80048cc:	b003      	add	sp, #12
 80048ce:	bd30      	pop	{r4, r5, pc}
 80048d0:	200000a4 	.word	0x200000a4

080048d4 <_malloc_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	1ccd      	adds	r5, r1, #3
 80048d8:	f025 0503 	bic.w	r5, r5, #3
 80048dc:	3508      	adds	r5, #8
 80048de:	2d0c      	cmp	r5, #12
 80048e0:	bf38      	it	cc
 80048e2:	250c      	movcc	r5, #12
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	4606      	mov	r6, r0
 80048e8:	db01      	blt.n	80048ee <_malloc_r+0x1a>
 80048ea:	42a9      	cmp	r1, r5
 80048ec:	d903      	bls.n	80048f6 <_malloc_r+0x22>
 80048ee:	230c      	movs	r3, #12
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	2000      	movs	r0, #0
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f6:	f000 f905 	bl	8004b04 <__malloc_lock>
 80048fa:	4921      	ldr	r1, [pc, #132]	; (8004980 <_malloc_r+0xac>)
 80048fc:	680a      	ldr	r2, [r1, #0]
 80048fe:	4614      	mov	r4, r2
 8004900:	b99c      	cbnz	r4, 800492a <_malloc_r+0x56>
 8004902:	4f20      	ldr	r7, [pc, #128]	; (8004984 <_malloc_r+0xb0>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	b923      	cbnz	r3, 8004912 <_malloc_r+0x3e>
 8004908:	4621      	mov	r1, r4
 800490a:	4630      	mov	r0, r6
 800490c:	f000 f83c 	bl	8004988 <_sbrk_r>
 8004910:	6038      	str	r0, [r7, #0]
 8004912:	4629      	mov	r1, r5
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f837 	bl	8004988 <_sbrk_r>
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	d123      	bne.n	8004966 <_malloc_r+0x92>
 800491e:	230c      	movs	r3, #12
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	4630      	mov	r0, r6
 8004924:	f000 f8f4 	bl	8004b10 <__malloc_unlock>
 8004928:	e7e3      	b.n	80048f2 <_malloc_r+0x1e>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	1b5b      	subs	r3, r3, r5
 800492e:	d417      	bmi.n	8004960 <_malloc_r+0x8c>
 8004930:	2b0b      	cmp	r3, #11
 8004932:	d903      	bls.n	800493c <_malloc_r+0x68>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	441c      	add	r4, r3
 8004938:	6025      	str	r5, [r4, #0]
 800493a:	e004      	b.n	8004946 <_malloc_r+0x72>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	42a2      	cmp	r2, r4
 8004940:	bf0c      	ite	eq
 8004942:	600b      	streq	r3, [r1, #0]
 8004944:	6053      	strne	r3, [r2, #4]
 8004946:	4630      	mov	r0, r6
 8004948:	f000 f8e2 	bl	8004b10 <__malloc_unlock>
 800494c:	f104 000b 	add.w	r0, r4, #11
 8004950:	1d23      	adds	r3, r4, #4
 8004952:	f020 0007 	bic.w	r0, r0, #7
 8004956:	1ac2      	subs	r2, r0, r3
 8004958:	d0cc      	beq.n	80048f4 <_malloc_r+0x20>
 800495a:	1a1b      	subs	r3, r3, r0
 800495c:	50a3      	str	r3, [r4, r2]
 800495e:	e7c9      	b.n	80048f4 <_malloc_r+0x20>
 8004960:	4622      	mov	r2, r4
 8004962:	6864      	ldr	r4, [r4, #4]
 8004964:	e7cc      	b.n	8004900 <_malloc_r+0x2c>
 8004966:	1cc4      	adds	r4, r0, #3
 8004968:	f024 0403 	bic.w	r4, r4, #3
 800496c:	42a0      	cmp	r0, r4
 800496e:	d0e3      	beq.n	8004938 <_malloc_r+0x64>
 8004970:	1a21      	subs	r1, r4, r0
 8004972:	4630      	mov	r0, r6
 8004974:	f000 f808 	bl	8004988 <_sbrk_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d1dd      	bne.n	8004938 <_malloc_r+0x64>
 800497c:	e7cf      	b.n	800491e <_malloc_r+0x4a>
 800497e:	bf00      	nop
 8004980:	200000a4 	.word	0x200000a4
 8004984:	200000a8 	.word	0x200000a8

08004988 <_sbrk_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d06      	ldr	r5, [pc, #24]	; (80049a4 <_sbrk_r+0x1c>)
 800498c:	2300      	movs	r3, #0
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	f7fc fb20 	bl	8000fd8 <_sbrk>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_sbrk_r+0x1a>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_sbrk_r+0x1a>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20000704 	.word	0x20000704

080049a8 <siprintf>:
 80049a8:	b40e      	push	{r1, r2, r3}
 80049aa:	b500      	push	{lr}
 80049ac:	b09c      	sub	sp, #112	; 0x70
 80049ae:	ab1d      	add	r3, sp, #116	; 0x74
 80049b0:	9002      	str	r0, [sp, #8]
 80049b2:	9006      	str	r0, [sp, #24]
 80049b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049b8:	4809      	ldr	r0, [pc, #36]	; (80049e0 <siprintf+0x38>)
 80049ba:	9107      	str	r1, [sp, #28]
 80049bc:	9104      	str	r1, [sp, #16]
 80049be:	4909      	ldr	r1, [pc, #36]	; (80049e4 <siprintf+0x3c>)
 80049c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c4:	9105      	str	r1, [sp, #20]
 80049c6:	6800      	ldr	r0, [r0, #0]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	a902      	add	r1, sp, #8
 80049cc:	f000 f902 	bl	8004bd4 <_svfiprintf_r>
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	b01c      	add	sp, #112	; 0x70
 80049d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049dc:	b003      	add	sp, #12
 80049de:	4770      	bx	lr
 80049e0:	20000010 	.word	0x20000010
 80049e4:	ffff0208 	.word	0xffff0208

080049e8 <_strtol_l.isra.0>:
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ee:	d001      	beq.n	80049f4 <_strtol_l.isra.0+0xc>
 80049f0:	2b24      	cmp	r3, #36	; 0x24
 80049f2:	d906      	bls.n	8004a02 <_strtol_l.isra.0+0x1a>
 80049f4:	f7ff fede 	bl	80047b4 <__errno>
 80049f8:	2316      	movs	r3, #22
 80049fa:	6003      	str	r3, [r0, #0]
 80049fc:	2000      	movs	r0, #0
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	4f3a      	ldr	r7, [pc, #232]	; (8004aec <_strtol_l.isra.0+0x104>)
 8004a04:	468e      	mov	lr, r1
 8004a06:	4676      	mov	r6, lr
 8004a08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004a0c:	5de5      	ldrb	r5, [r4, r7]
 8004a0e:	f015 0508 	ands.w	r5, r5, #8
 8004a12:	d1f8      	bne.n	8004a06 <_strtol_l.isra.0+0x1e>
 8004a14:	2c2d      	cmp	r4, #45	; 0x2d
 8004a16:	d134      	bne.n	8004a82 <_strtol_l.isra.0+0x9a>
 8004a18:	f89e 4000 	ldrb.w	r4, [lr]
 8004a1c:	f04f 0801 	mov.w	r8, #1
 8004a20:	f106 0e02 	add.w	lr, r6, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d05c      	beq.n	8004ae2 <_strtol_l.isra.0+0xfa>
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d10c      	bne.n	8004a46 <_strtol_l.isra.0+0x5e>
 8004a2c:	2c30      	cmp	r4, #48	; 0x30
 8004a2e:	d10a      	bne.n	8004a46 <_strtol_l.isra.0+0x5e>
 8004a30:	f89e 4000 	ldrb.w	r4, [lr]
 8004a34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004a38:	2c58      	cmp	r4, #88	; 0x58
 8004a3a:	d14d      	bne.n	8004ad8 <_strtol_l.isra.0+0xf0>
 8004a3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004a40:	2310      	movs	r3, #16
 8004a42:	f10e 0e02 	add.w	lr, lr, #2
 8004a46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004a4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a4e:	2600      	movs	r6, #0
 8004a50:	fbbc f9f3 	udiv	r9, ip, r3
 8004a54:	4635      	mov	r5, r6
 8004a56:	fb03 ca19 	mls	sl, r3, r9, ip
 8004a5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004a5e:	2f09      	cmp	r7, #9
 8004a60:	d818      	bhi.n	8004a94 <_strtol_l.isra.0+0xac>
 8004a62:	463c      	mov	r4, r7
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	dd24      	ble.n	8004ab2 <_strtol_l.isra.0+0xca>
 8004a68:	2e00      	cmp	r6, #0
 8004a6a:	db1f      	blt.n	8004aac <_strtol_l.isra.0+0xc4>
 8004a6c:	45a9      	cmp	r9, r5
 8004a6e:	d31d      	bcc.n	8004aac <_strtol_l.isra.0+0xc4>
 8004a70:	d101      	bne.n	8004a76 <_strtol_l.isra.0+0x8e>
 8004a72:	45a2      	cmp	sl, r4
 8004a74:	db1a      	blt.n	8004aac <_strtol_l.isra.0+0xc4>
 8004a76:	fb05 4503 	mla	r5, r5, r3, r4
 8004a7a:	2601      	movs	r6, #1
 8004a7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004a80:	e7eb      	b.n	8004a5a <_strtol_l.isra.0+0x72>
 8004a82:	2c2b      	cmp	r4, #43	; 0x2b
 8004a84:	bf08      	it	eq
 8004a86:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004a8a:	46a8      	mov	r8, r5
 8004a8c:	bf08      	it	eq
 8004a8e:	f106 0e02 	addeq.w	lr, r6, #2
 8004a92:	e7c7      	b.n	8004a24 <_strtol_l.isra.0+0x3c>
 8004a94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004a98:	2f19      	cmp	r7, #25
 8004a9a:	d801      	bhi.n	8004aa0 <_strtol_l.isra.0+0xb8>
 8004a9c:	3c37      	subs	r4, #55	; 0x37
 8004a9e:	e7e1      	b.n	8004a64 <_strtol_l.isra.0+0x7c>
 8004aa0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004aa4:	2f19      	cmp	r7, #25
 8004aa6:	d804      	bhi.n	8004ab2 <_strtol_l.isra.0+0xca>
 8004aa8:	3c57      	subs	r4, #87	; 0x57
 8004aaa:	e7db      	b.n	8004a64 <_strtol_l.isra.0+0x7c>
 8004aac:	f04f 36ff 	mov.w	r6, #4294967295
 8004ab0:	e7e4      	b.n	8004a7c <_strtol_l.isra.0+0x94>
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	da05      	bge.n	8004ac2 <_strtol_l.isra.0+0xda>
 8004ab6:	2322      	movs	r3, #34	; 0x22
 8004ab8:	6003      	str	r3, [r0, #0]
 8004aba:	4665      	mov	r5, ip
 8004abc:	b942      	cbnz	r2, 8004ad0 <_strtol_l.isra.0+0xe8>
 8004abe:	4628      	mov	r0, r5
 8004ac0:	e79d      	b.n	80049fe <_strtol_l.isra.0+0x16>
 8004ac2:	f1b8 0f00 	cmp.w	r8, #0
 8004ac6:	d000      	beq.n	8004aca <_strtol_l.isra.0+0xe2>
 8004ac8:	426d      	negs	r5, r5
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	d0f7      	beq.n	8004abe <_strtol_l.isra.0+0xd6>
 8004ace:	b10e      	cbz	r6, 8004ad4 <_strtol_l.isra.0+0xec>
 8004ad0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004ad4:	6011      	str	r1, [r2, #0]
 8004ad6:	e7f2      	b.n	8004abe <_strtol_l.isra.0+0xd6>
 8004ad8:	2430      	movs	r4, #48	; 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1b3      	bne.n	8004a46 <_strtol_l.isra.0+0x5e>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	e7b1      	b.n	8004a46 <_strtol_l.isra.0+0x5e>
 8004ae2:	2c30      	cmp	r4, #48	; 0x30
 8004ae4:	d0a4      	beq.n	8004a30 <_strtol_l.isra.0+0x48>
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	e7ad      	b.n	8004a46 <_strtol_l.isra.0+0x5e>
 8004aea:	bf00      	nop
 8004aec:	08005239 	.word	0x08005239

08004af0 <strtol>:
 8004af0:	4613      	mov	r3, r2
 8004af2:	460a      	mov	r2, r1
 8004af4:	4601      	mov	r1, r0
 8004af6:	4802      	ldr	r0, [pc, #8]	; (8004b00 <strtol+0x10>)
 8004af8:	6800      	ldr	r0, [r0, #0]
 8004afa:	f7ff bf75 	b.w	80049e8 <_strtol_l.isra.0>
 8004afe:	bf00      	nop
 8004b00:	20000010 	.word	0x20000010

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f000 baf9 	b.w	80050fc <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	2000070c 	.word	0x2000070c

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f000 baf4 	b.w	80050fe <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	2000070c 	.word	0x2000070c

08004b1c <__ssputs_r>:
 8004b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	688e      	ldr	r6, [r1, #8]
 8004b22:	429e      	cmp	r6, r3
 8004b24:	4682      	mov	sl, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	4690      	mov	r8, r2
 8004b2a:	461f      	mov	r7, r3
 8004b2c:	d838      	bhi.n	8004ba0 <__ssputs_r+0x84>
 8004b2e:	898a      	ldrh	r2, [r1, #12]
 8004b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b34:	d032      	beq.n	8004b9c <__ssputs_r+0x80>
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	6909      	ldr	r1, [r1, #16]
 8004b3a:	eba5 0901 	sub.w	r9, r5, r1
 8004b3e:	6965      	ldr	r5, [r4, #20]
 8004b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b48:	3301      	adds	r3, #1
 8004b4a:	444b      	add	r3, r9
 8004b4c:	106d      	asrs	r5, r5, #1
 8004b4e:	429d      	cmp	r5, r3
 8004b50:	bf38      	it	cc
 8004b52:	461d      	movcc	r5, r3
 8004b54:	0553      	lsls	r3, r2, #21
 8004b56:	d531      	bpl.n	8004bbc <__ssputs_r+0xa0>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7ff febb 	bl	80048d4 <_malloc_r>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	b950      	cbnz	r0, 8004b78 <__ssputs_r+0x5c>
 8004b62:	230c      	movs	r3, #12
 8004b64:	f8ca 3000 	str.w	r3, [sl]
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b78:	6921      	ldr	r1, [r4, #16]
 8004b7a:	464a      	mov	r2, r9
 8004b7c:	f7ff fe44 	bl	8004808 <memcpy>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	6126      	str	r6, [r4, #16]
 8004b8e:	6165      	str	r5, [r4, #20]
 8004b90:	444e      	add	r6, r9
 8004b92:	eba5 0509 	sub.w	r5, r5, r9
 8004b96:	6026      	str	r6, [r4, #0]
 8004b98:	60a5      	str	r5, [r4, #8]
 8004b9a:	463e      	mov	r6, r7
 8004b9c:	42be      	cmp	r6, r7
 8004b9e:	d900      	bls.n	8004ba2 <__ssputs_r+0x86>
 8004ba0:	463e      	mov	r6, r7
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	f000 faaa 	bl	8005100 <memmove>
 8004bac:	68a3      	ldr	r3, [r4, #8]
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	1b9b      	subs	r3, r3, r6
 8004bb2:	4432      	add	r2, r6
 8004bb4:	60a3      	str	r3, [r4, #8]
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e7db      	b.n	8004b74 <__ssputs_r+0x58>
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	f000 fab9 	bl	8005134 <_realloc_r>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1e1      	bne.n	8004b8c <__ssputs_r+0x70>
 8004bc8:	6921      	ldr	r1, [r4, #16]
 8004bca:	4650      	mov	r0, sl
 8004bcc:	f7ff fe32 	bl	8004834 <_free_r>
 8004bd0:	e7c7      	b.n	8004b62 <__ssputs_r+0x46>
	...

08004bd4 <_svfiprintf_r>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	4698      	mov	r8, r3
 8004bda:	898b      	ldrh	r3, [r1, #12]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	b09d      	sub	sp, #116	; 0x74
 8004be0:	4607      	mov	r7, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	d50e      	bpl.n	8004c06 <_svfiprintf_r+0x32>
 8004be8:	690b      	ldr	r3, [r1, #16]
 8004bea:	b963      	cbnz	r3, 8004c06 <_svfiprintf_r+0x32>
 8004bec:	2140      	movs	r1, #64	; 0x40
 8004bee:	f7ff fe71 	bl	80048d4 <_malloc_r>
 8004bf2:	6028      	str	r0, [r5, #0]
 8004bf4:	6128      	str	r0, [r5, #16]
 8004bf6:	b920      	cbnz	r0, 8004c02 <_svfiprintf_r+0x2e>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e0d1      	b.n	8004da6 <_svfiprintf_r+0x1d2>
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	616b      	str	r3, [r5, #20]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c14:	2330      	movs	r3, #48	; 0x30
 8004c16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dc0 <_svfiprintf_r+0x1ec>
 8004c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c1e:	f04f 0901 	mov.w	r9, #1
 8004c22:	4623      	mov	r3, r4
 8004c24:	469a      	mov	sl, r3
 8004c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c2a:	b10a      	cbz	r2, 8004c30 <_svfiprintf_r+0x5c>
 8004c2c:	2a25      	cmp	r2, #37	; 0x25
 8004c2e:	d1f9      	bne.n	8004c24 <_svfiprintf_r+0x50>
 8004c30:	ebba 0b04 	subs.w	fp, sl, r4
 8004c34:	d00b      	beq.n	8004c4e <_svfiprintf_r+0x7a>
 8004c36:	465b      	mov	r3, fp
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ff6d 	bl	8004b1c <__ssputs_r>
 8004c42:	3001      	adds	r0, #1
 8004c44:	f000 80aa 	beq.w	8004d9c <_svfiprintf_r+0x1c8>
 8004c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4a:	445a      	add	r2, fp
 8004c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a2 	beq.w	8004d9c <_svfiprintf_r+0x1c8>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c62:	f10a 0a01 	add.w	sl, sl, #1
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	9307      	str	r3, [sp, #28]
 8004c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c70:	4654      	mov	r4, sl
 8004c72:	2205      	movs	r2, #5
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	4851      	ldr	r0, [pc, #324]	; (8004dc0 <_svfiprintf_r+0x1ec>)
 8004c7a:	f7fb fad1 	bl	8000220 <memchr>
 8004c7e:	9a04      	ldr	r2, [sp, #16]
 8004c80:	b9d8      	cbnz	r0, 8004cba <_svfiprintf_r+0xe6>
 8004c82:	06d0      	lsls	r0, r2, #27
 8004c84:	bf44      	itt	mi
 8004c86:	2320      	movmi	r3, #32
 8004c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8c:	0711      	lsls	r1, r2, #28
 8004c8e:	bf44      	itt	mi
 8004c90:	232b      	movmi	r3, #43	; 0x2b
 8004c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c96:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9c:	d015      	beq.n	8004cca <_svfiprintf_r+0xf6>
 8004c9e:	9a07      	ldr	r2, [sp, #28]
 8004ca0:	4654      	mov	r4, sl
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f04f 0c0a 	mov.w	ip, #10
 8004ca8:	4621      	mov	r1, r4
 8004caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cae:	3b30      	subs	r3, #48	; 0x30
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	d94e      	bls.n	8004d52 <_svfiprintf_r+0x17e>
 8004cb4:	b1b0      	cbz	r0, 8004ce4 <_svfiprintf_r+0x110>
 8004cb6:	9207      	str	r2, [sp, #28]
 8004cb8:	e014      	b.n	8004ce4 <_svfiprintf_r+0x110>
 8004cba:	eba0 0308 	sub.w	r3, r0, r8
 8004cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	46a2      	mov	sl, r4
 8004cc8:	e7d2      	b.n	8004c70 <_svfiprintf_r+0x9c>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	1d19      	adds	r1, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9103      	str	r1, [sp, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	425b      	neglt	r3, r3
 8004cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cdc:	9307      	strge	r3, [sp, #28]
 8004cde:	9307      	strlt	r3, [sp, #28]
 8004ce0:	bfb8      	it	lt
 8004ce2:	9204      	strlt	r2, [sp, #16]
 8004ce4:	7823      	ldrb	r3, [r4, #0]
 8004ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce8:	d10c      	bne.n	8004d04 <_svfiprintf_r+0x130>
 8004cea:	7863      	ldrb	r3, [r4, #1]
 8004cec:	2b2a      	cmp	r3, #42	; 0x2a
 8004cee:	d135      	bne.n	8004d5c <_svfiprintf_r+0x188>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	1d1a      	adds	r2, r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	9203      	str	r2, [sp, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d00:	3402      	adds	r4, #2
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004dd0 <_svfiprintf_r+0x1fc>
 8004d08:	7821      	ldrb	r1, [r4, #0]
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	f7fb fa87 	bl	8000220 <memchr>
 8004d12:	b140      	cbz	r0, 8004d26 <_svfiprintf_r+0x152>
 8004d14:	2340      	movs	r3, #64	; 0x40
 8004d16:	eba0 000a 	sub.w	r0, r0, sl
 8004d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d1e:	9b04      	ldr	r3, [sp, #16]
 8004d20:	4303      	orrs	r3, r0
 8004d22:	3401      	adds	r4, #1
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d2a:	4826      	ldr	r0, [pc, #152]	; (8004dc4 <_svfiprintf_r+0x1f0>)
 8004d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d30:	2206      	movs	r2, #6
 8004d32:	f7fb fa75 	bl	8000220 <memchr>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d038      	beq.n	8004dac <_svfiprintf_r+0x1d8>
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <_svfiprintf_r+0x1f4>)
 8004d3c:	bb1b      	cbnz	r3, 8004d86 <_svfiprintf_r+0x1b2>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	3308      	adds	r3, #8
 8004d48:	9303      	str	r3, [sp, #12]
 8004d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4c:	4433      	add	r3, r6
 8004d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d50:	e767      	b.n	8004c22 <_svfiprintf_r+0x4e>
 8004d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d56:	460c      	mov	r4, r1
 8004d58:	2001      	movs	r0, #1
 8004d5a:	e7a5      	b.n	8004ca8 <_svfiprintf_r+0xd4>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0c0a 	mov.w	ip, #10
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d6e:	3a30      	subs	r2, #48	; 0x30
 8004d70:	2a09      	cmp	r2, #9
 8004d72:	d903      	bls.n	8004d7c <_svfiprintf_r+0x1a8>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0c5      	beq.n	8004d04 <_svfiprintf_r+0x130>
 8004d78:	9105      	str	r1, [sp, #20]
 8004d7a:	e7c3      	b.n	8004d04 <_svfiprintf_r+0x130>
 8004d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d80:	4604      	mov	r4, r0
 8004d82:	2301      	movs	r3, #1
 8004d84:	e7f0      	b.n	8004d68 <_svfiprintf_r+0x194>
 8004d86:	ab03      	add	r3, sp, #12
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <_svfiprintf_r+0x1f8>)
 8004d8e:	a904      	add	r1, sp, #16
 8004d90:	4638      	mov	r0, r7
 8004d92:	f3af 8000 	nop.w
 8004d96:	1c42      	adds	r2, r0, #1
 8004d98:	4606      	mov	r6, r0
 8004d9a:	d1d6      	bne.n	8004d4a <_svfiprintf_r+0x176>
 8004d9c:	89ab      	ldrh	r3, [r5, #12]
 8004d9e:	065b      	lsls	r3, r3, #25
 8004da0:	f53f af2c 	bmi.w	8004bfc <_svfiprintf_r+0x28>
 8004da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004da6:	b01d      	add	sp, #116	; 0x74
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	ab03      	add	r3, sp, #12
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	462a      	mov	r2, r5
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <_svfiprintf_r+0x1f8>)
 8004db4:	a904      	add	r1, sp, #16
 8004db6:	4638      	mov	r0, r7
 8004db8:	f000 f87a 	bl	8004eb0 <_printf_i>
 8004dbc:	e7eb      	b.n	8004d96 <_svfiprintf_r+0x1c2>
 8004dbe:	bf00      	nop
 8004dc0:	08005339 	.word	0x08005339
 8004dc4:	08005343 	.word	0x08005343
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	08004b1d 	.word	0x08004b1d
 8004dd0:	0800533f 	.word	0x0800533f

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4699      	mov	r9, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfb8      	it	lt
 8004de8:	4613      	movlt	r3, r2
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004df0:	4607      	mov	r7, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc26      	bgt.n	8004e6a <_printf_common+0x96>
 8004e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e20:	1e13      	subs	r3, r2, #0
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d42b      	bmi.n	8004e84 <_printf_common+0xb0>
 8004e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e30:	4649      	mov	r1, r9
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	3001      	adds	r0, #1
 8004e38:	d01e      	beq.n	8004e78 <_printf_common+0xa4>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	68e5      	ldr	r5, [r4, #12]
 8004e3e:	6832      	ldr	r2, [r6, #0]
 8004e40:	f003 0306 	and.w	r3, r3, #6
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	bf08      	it	eq
 8004e48:	1aad      	subeq	r5, r5, r2
 8004e4a:	68a3      	ldr	r3, [r4, #8]
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	2600      	movs	r6, #0
 8004e60:	341a      	adds	r4, #26
 8004e62:	42b5      	cmp	r5, r6
 8004e64:	d11a      	bne.n	8004e9c <_printf_common+0xc8>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e008      	b.n	8004e7c <_printf_common+0xa8>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4638      	mov	r0, r7
 8004e72:	47c0      	blx	r8
 8004e74:	3001      	adds	r0, #1
 8004e76:	d103      	bne.n	8004e80 <_printf_common+0xac>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7c6      	b.n	8004e12 <_printf_common+0x3e>
 8004e84:	18e1      	adds	r1, r4, r3
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	2030      	movs	r0, #48	; 0x30
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e8e:	4422      	add	r2, r4
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e98:	3302      	adds	r3, #2
 8004e9a:	e7c7      	b.n	8004e2c <_printf_common+0x58>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d0e6      	beq.n	8004e78 <_printf_common+0xa4>
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7d9      	b.n	8004e62 <_printf_common+0x8e>
	...

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	7e27      	ldrb	r7, [r4, #24]
 8004eba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ebc:	2f78      	cmp	r7, #120	; 0x78
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	; 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d8 	beq.w	8005082 <_printf_i+0x1d2>
 8004ed2:	2f58      	cmp	r7, #88	; 0x58
 8004ed4:	f000 80a3 	beq.w	800501e <_printf_i+0x16e>
 8004ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a001      	add	r0, pc, #4	; (adr r0, 8004ef0 <_printf_i+0x40>)
 8004eec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	08005069 	.word	0x08005069
 8004f20:	08004f8d 	.word	0x08004f8d
 8004f24:	0800504b 	.word	0x0800504b
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	0800508b 	.word	0x0800508b
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	08005053 	.word	0x08005053
 8004f48:	680b      	ldr	r3, [r1, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	600a      	str	r2, [r1, #0]
 8004f50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0a3      	b.n	80050a4 <_printf_i+0x1f4>
 8004f5c:	6825      	ldr	r5, [r4, #0]
 8004f5e:	6808      	ldr	r0, [r1, #0]
 8004f60:	062e      	lsls	r6, r5, #24
 8004f62:	f100 0304 	add.w	r3, r0, #4
 8004f66:	d50a      	bpl.n	8004f7e <_printf_i+0xce>
 8004f68:	6805      	ldr	r5, [r0, #0]
 8004f6a:	600b      	str	r3, [r1, #0]
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	da03      	bge.n	8004f78 <_printf_i+0xc8>
 8004f70:	232d      	movs	r3, #45	; 0x2d
 8004f72:	426d      	negs	r5, r5
 8004f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f78:	485e      	ldr	r0, [pc, #376]	; (80050f4 <_printf_i+0x244>)
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	e019      	b.n	8004fb2 <_printf_i+0x102>
 8004f7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f82:	6805      	ldr	r5, [r0, #0]
 8004f84:	600b      	str	r3, [r1, #0]
 8004f86:	bf18      	it	ne
 8004f88:	b22d      	sxthne	r5, r5
 8004f8a:	e7ef      	b.n	8004f6c <_printf_i+0xbc>
 8004f8c:	680b      	ldr	r3, [r1, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	1d18      	adds	r0, r3, #4
 8004f92:	6008      	str	r0, [r1, #0]
 8004f94:	0628      	lsls	r0, r5, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xec>
 8004f98:	681d      	ldr	r5, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0xf2>
 8004f9c:	0669      	lsls	r1, r5, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xe8>
 8004fa0:	881d      	ldrh	r5, [r3, #0]
 8004fa2:	4854      	ldr	r0, [pc, #336]	; (80050f4 <_printf_i+0x244>)
 8004fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2308      	moveq	r3, #8
 8004faa:	230a      	movne	r3, #10
 8004fac:	2100      	movs	r1, #0
 8004fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb2:	6866      	ldr	r6, [r4, #4]
 8004fb4:	60a6      	str	r6, [r4, #8]
 8004fb6:	2e00      	cmp	r6, #0
 8004fb8:	bfa2      	ittt	ge
 8004fba:	6821      	ldrge	r1, [r4, #0]
 8004fbc:	f021 0104 	bicge.w	r1, r1, #4
 8004fc0:	6021      	strge	r1, [r4, #0]
 8004fc2:	b90d      	cbnz	r5, 8004fc8 <_printf_i+0x118>
 8004fc4:	2e00      	cmp	r6, #0
 8004fc6:	d04d      	beq.n	8005064 <_printf_i+0x1b4>
 8004fc8:	4616      	mov	r6, r2
 8004fca:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fce:	fb03 5711 	mls	r7, r3, r1, r5
 8004fd2:	5dc7      	ldrb	r7, [r0, r7]
 8004fd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fd8:	462f      	mov	r7, r5
 8004fda:	42bb      	cmp	r3, r7
 8004fdc:	460d      	mov	r5, r1
 8004fde:	d9f4      	bls.n	8004fca <_printf_i+0x11a>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d10b      	bne.n	8004ffc <_printf_i+0x14c>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	07df      	lsls	r7, r3, #31
 8004fe8:	d508      	bpl.n	8004ffc <_printf_i+0x14c>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	6861      	ldr	r1, [r4, #4]
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	bfde      	ittt	le
 8004ff2:	2330      	movle	r3, #48	; 0x30
 8004ff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ffc:	1b92      	subs	r2, r2, r6
 8004ffe:	6122      	str	r2, [r4, #16]
 8005000:	f8cd a000 	str.w	sl, [sp]
 8005004:	464b      	mov	r3, r9
 8005006:	aa03      	add	r2, sp, #12
 8005008:	4621      	mov	r1, r4
 800500a:	4640      	mov	r0, r8
 800500c:	f7ff fee2 	bl	8004dd4 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	d14c      	bne.n	80050ae <_printf_i+0x1fe>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	b004      	add	sp, #16
 800501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501e:	4835      	ldr	r0, [pc, #212]	; (80050f4 <_printf_i+0x244>)
 8005020:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	680e      	ldr	r6, [r1, #0]
 8005028:	061f      	lsls	r7, r3, #24
 800502a:	f856 5b04 	ldr.w	r5, [r6], #4
 800502e:	600e      	str	r6, [r1, #0]
 8005030:	d514      	bpl.n	800505c <_printf_i+0x1ac>
 8005032:	07d9      	lsls	r1, r3, #31
 8005034:	bf44      	itt	mi
 8005036:	f043 0320 	orrmi.w	r3, r3, #32
 800503a:	6023      	strmi	r3, [r4, #0]
 800503c:	b91d      	cbnz	r5, 8005046 <_printf_i+0x196>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f023 0320 	bic.w	r3, r3, #32
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2310      	movs	r3, #16
 8005048:	e7b0      	b.n	8004fac <_printf_i+0xfc>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	2378      	movs	r3, #120	; 0x78
 8005054:	4828      	ldr	r0, [pc, #160]	; (80050f8 <_printf_i+0x248>)
 8005056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800505a:	e7e3      	b.n	8005024 <_printf_i+0x174>
 800505c:	065e      	lsls	r6, r3, #25
 800505e:	bf48      	it	mi
 8005060:	b2ad      	uxthmi	r5, r5
 8005062:	e7e6      	b.n	8005032 <_printf_i+0x182>
 8005064:	4616      	mov	r6, r2
 8005066:	e7bb      	b.n	8004fe0 <_printf_i+0x130>
 8005068:	680b      	ldr	r3, [r1, #0]
 800506a:	6826      	ldr	r6, [r4, #0]
 800506c:	6960      	ldr	r0, [r4, #20]
 800506e:	1d1d      	adds	r5, r3, #4
 8005070:	600d      	str	r5, [r1, #0]
 8005072:	0635      	lsls	r5, r6, #24
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	d501      	bpl.n	800507c <_printf_i+0x1cc>
 8005078:	6018      	str	r0, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0x1d2>
 800507c:	0671      	lsls	r1, r6, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0x1c8>
 8005080:	8018      	strh	r0, [r3, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	4616      	mov	r6, r2
 8005088:	e7ba      	b.n	8005000 <_printf_i+0x150>
 800508a:	680b      	ldr	r3, [r1, #0]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	600a      	str	r2, [r1, #0]
 8005090:	681e      	ldr	r6, [r3, #0]
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	2100      	movs	r1, #0
 8005096:	4630      	mov	r0, r6
 8005098:	f7fb f8c2 	bl	8000220 <memchr>
 800509c:	b108      	cbz	r0, 80050a2 <_printf_i+0x1f2>
 800509e:	1b80      	subs	r0, r0, r6
 80050a0:	6060      	str	r0, [r4, #4]
 80050a2:	6863      	ldr	r3, [r4, #4]
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	2300      	movs	r3, #0
 80050a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ac:	e7a8      	b.n	8005000 <_printf_i+0x150>
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	4632      	mov	r2, r6
 80050b2:	4649      	mov	r1, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	47d0      	blx	sl
 80050b8:	3001      	adds	r0, #1
 80050ba:	d0ab      	beq.n	8005014 <_printf_i+0x164>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	079b      	lsls	r3, r3, #30
 80050c0:	d413      	bmi.n	80050ea <_printf_i+0x23a>
 80050c2:	68e0      	ldr	r0, [r4, #12]
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	4298      	cmp	r0, r3
 80050c8:	bfb8      	it	lt
 80050ca:	4618      	movlt	r0, r3
 80050cc:	e7a4      	b.n	8005018 <_printf_i+0x168>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4632      	mov	r2, r6
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d09b      	beq.n	8005014 <_printf_i+0x164>
 80050dc:	3501      	adds	r5, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	9903      	ldr	r1, [sp, #12]
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dcf2      	bgt.n	80050ce <_printf_i+0x21e>
 80050e8:	e7eb      	b.n	80050c2 <_printf_i+0x212>
 80050ea:	2500      	movs	r5, #0
 80050ec:	f104 0619 	add.w	r6, r4, #25
 80050f0:	e7f5      	b.n	80050de <_printf_i+0x22e>
 80050f2:	bf00      	nop
 80050f4:	0800534a 	.word	0x0800534a
 80050f8:	0800535b 	.word	0x0800535b

080050fc <__retarget_lock_acquire_recursive>:
 80050fc:	4770      	bx	lr

080050fe <__retarget_lock_release_recursive>:
 80050fe:	4770      	bx	lr

08005100 <memmove>:
 8005100:	4288      	cmp	r0, r1
 8005102:	b510      	push	{r4, lr}
 8005104:	eb01 0402 	add.w	r4, r1, r2
 8005108:	d902      	bls.n	8005110 <memmove+0x10>
 800510a:	4284      	cmp	r4, r0
 800510c:	4623      	mov	r3, r4
 800510e:	d807      	bhi.n	8005120 <memmove+0x20>
 8005110:	1e43      	subs	r3, r0, #1
 8005112:	42a1      	cmp	r1, r4
 8005114:	d008      	beq.n	8005128 <memmove+0x28>
 8005116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800511a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800511e:	e7f8      	b.n	8005112 <memmove+0x12>
 8005120:	4402      	add	r2, r0
 8005122:	4601      	mov	r1, r0
 8005124:	428a      	cmp	r2, r1
 8005126:	d100      	bne.n	800512a <memmove+0x2a>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800512e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005132:	e7f7      	b.n	8005124 <memmove+0x24>

08005134 <_realloc_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	4607      	mov	r7, r0
 8005138:	4614      	mov	r4, r2
 800513a:	460e      	mov	r6, r1
 800513c:	b921      	cbnz	r1, 8005148 <_realloc_r+0x14>
 800513e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005142:	4611      	mov	r1, r2
 8005144:	f7ff bbc6 	b.w	80048d4 <_malloc_r>
 8005148:	b922      	cbnz	r2, 8005154 <_realloc_r+0x20>
 800514a:	f7ff fb73 	bl	8004834 <_free_r>
 800514e:	4625      	mov	r5, r4
 8005150:	4628      	mov	r0, r5
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005154:	f000 f814 	bl	8005180 <_malloc_usable_size_r>
 8005158:	42a0      	cmp	r0, r4
 800515a:	d20f      	bcs.n	800517c <_realloc_r+0x48>
 800515c:	4621      	mov	r1, r4
 800515e:	4638      	mov	r0, r7
 8005160:	f7ff fbb8 	bl	80048d4 <_malloc_r>
 8005164:	4605      	mov	r5, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	d0f2      	beq.n	8005150 <_realloc_r+0x1c>
 800516a:	4631      	mov	r1, r6
 800516c:	4622      	mov	r2, r4
 800516e:	f7ff fb4b 	bl	8004808 <memcpy>
 8005172:	4631      	mov	r1, r6
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff fb5d 	bl	8004834 <_free_r>
 800517a:	e7e9      	b.n	8005150 <_realloc_r+0x1c>
 800517c:	4635      	mov	r5, r6
 800517e:	e7e7      	b.n	8005150 <_realloc_r+0x1c>

08005180 <_malloc_usable_size_r>:
 8005180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005184:	1f18      	subs	r0, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfbc      	itt	lt
 800518a:	580b      	ldrlt	r3, [r1, r0]
 800518c:	18c0      	addlt	r0, r0, r3
 800518e:	4770      	bx	lr

08005190 <_init>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr

0800519c <_fini>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr
